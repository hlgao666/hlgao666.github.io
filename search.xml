<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我和浅浅的开始</title>
      <link href="/2020/11/25/%E6%88%91%E5%92%8C%E6%B5%85%E6%B5%85/"/>
      <url>/2020/11/25/%E6%88%91%E5%92%8C%E6%B5%85%E6%B5%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center><font size="5">我和浅浅（一）——我和浅浅的开始<br></font></center><center><font size="1">作者：<b>假如苏子还在</b></font></center><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=409941465&amp;auto=1&amp;height=66"></iframe></center><hr><p>  我和浅浅已经共同生活了20天了。还记得第一天去接她的时候，下着小雨，我打着车满怀欣喜和期待的去快递驿站。我走进去远远的看见一个蓝色的小笼子里一坨白色的肉球，我走到她身边，颠簸了两三天的浅浅扒着笼子冲我摇尾巴，除了有点脏以外其他都还好。我蹲下来把手指放到笼子里面，浅浅用软乎乎的小舌头舔我，从那一刻，她就完全属于我了。<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/90911ad2-63b7-4a1f-9a7c-d716c7b09baa.jpg" alt=""><br>  接到她的第一件事就是带她去宠物店做检查，还好细小和犬瘟她都没有，健健康康，而且特别胖，之前吃的都是母乳，虽然才1个多月，但是我一只手都抓不起来她。最开始浅浅特别胆小，抱她的时候一直发抖，所以最开始每次抱她我都小心翼翼，生怕用多余的一点力让他感到不舒服。</p><p>  接她回家的第一天，特别活泼，到处跑来跑去摇着那短短一根毛茸茸的小尾巴，像是要探索这整片领域。我还担心她路上颠簸几天会很累，没想到我的浅浅这么坚强。第一天晚上我很担心她到了陌生的环境会一直叫，因为我是和另外一个女生一起合租的两室一厅，我担心浅浅影响到她，所以到了晚上我就开始紧张，没想到喂完她把她放在笼子里之后，浅浅乖乖的就睡着了。一晚上，一声也没叫。合租的小姐妹说“你这可真是一条宝藏狗狗啊。”</p><p>  浅浅和我在学校周边的出租房里一起住了１２天，我会让她在我的卧室里尽情的撒欢，尽管不大，但足够浅浅玩耍。她总是随意的拉在我的床底下，以至于我每次都要跪在地板上擦拭擦尿，有时候拉到床的最里面，只能拿拖把拖，就会搞得整个拖把都臭臭的，每次洗拖把的时候我都要晕过去了。后来我掌握了她的排便规律，只要吃完，一分钟之内浅浅就会在地上闻来闻去找自己拉粑粑的领地，我尝试着把她放到笼子里面拉，但是一进笼子她就开始叫个不停，小奶抓扒着笼子急切地要出来，所以没办法每次都要把她抱出来放在地上，任由她随意自由的拉粑粑。后来我才知道狗狗的天性就是不会在吃饭和睡觉的地方排便，所以我又在外边铺了尿垫，上面还搜集了她的尿液和粑粑，想让她学会定点大小便，但是浅浅每次不但不在尿垫上排便，而且还摇头晃脑的把尿垫咬来咬去，每次想发火，但是看着她可爱的小样子又忍不住想笑。</p><p>  后来浅浅又跟着我到了广州实习。其实在这之前，我有想过把她送走，因为我怕我实习之后就没有那么多时间照顾她，我怕她跟着我不能健康平安地长大。所以我挣扎了很久，最终还是带她去了宠物店，我想如果不能给她找一个好主人，至少在宠物店可以平安无事。我跑了三四家宠物店，他们都说浅浅太小了，担心以后会有什么问题所以都不敢收。说来也奇怪，浅浅一向在外胆子小，除了发抖也不敢叫，但是那几次在宠物店的时候，不管谁抱她，她都哼哼唧唧的乱叫，动来动去一点也不老实，等把她从宠物店带出来，立马乖乖的。我当时觉得别看她小，这么一点点的小狗也是很有灵性的。后来我又把她挂在了闲鱼上，就在我打算来广州的前几天，有一位善良温柔的小姐姐通过闲鱼联系到了我，当她给我打电话说要去家里看狗的时候，那一刻，我的内心深处突然就冒出来一个想法，“希望她不要看上我的狗狗。”我真的很奇怪，我纠结了那么多天，最终决定把她送走，可是当真的要把她送走的那一刻，我又不愿意把她送走了。那位姐姐看到浅浅之后喜欢的不得了，她越喜欢，我越难受。当我把浅浅放到她怀里的时候，就好像亲手把原本专属自己的东西拱手于人，一种不甘和嫉妒感竟从心而生。那天晚上浅浅像发疯一样一直咬，咬我，咬那个姐姐，我不知道这是不是她的一种反抗。当然，最终我没有送出去，我不舍得。也好在那位姐姐非常善解人意，我临走前她给我发消息说“幸好你没有放弃她。”<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/1fa7bb1a-cea8-4e19-8612-a5e5bb1445ca.jpg" alt=""><br>  就这样，浅浅和我一起来到了广州。也许以后浅浅还是要跟着我四处奔波，但是我再也不会把她送走，这辈子我们是注定要一直在一起了。<br>到了广州，我在找实习公司之前暂住在小姨家。小姨家养了一只六个月大的蓝猫，特别胖，个头是浅浅的两倍。但是胆子小的还不及浅浅的十分之一。浅浅先是抢他的猫粮，把半碗猫粮吃了个精光，紧接着又玩他的玩具，那只胆小的蓝猫只敢远远的看着，无奈却无可奈何。</p><p>  最后，浅浅追着蓝猫跑来跑去，白色的小肉团追着一根肥硕的蓝猫尾巴，蓝猫吓得上蹿下跳，浅浅却乐此不疲，最后直接跳到蓝猫身上把他扑倒，结果蓝猫全身的毛都竖起来了。我和浅浅住了那么几天，真的是心疼那只蓝猫。</p><p>  后来我和浅浅租了一个公寓，在公寓里面浅浅乖了不少，没有猫供她玩耍，她只能孤单的玩我的玩偶。我每天早上九点半上班，下午六点半下班，中间这么长的时间，浅浅都要自己在家。每天下班回家，当我走到门口按密码的时候，我就能听见浅浅的小奶声嘤嘤嘤，一看到我小尾巴都要要断了，每次回家抱起她的那一刻，在外一整天的疲惫都消失了。虽然还要仅紧接着给她打扫留在笼子底座的便便，但是我甘之如饴。</p><p>  浅浅在我睡觉的时候一声不吭，我不理她的时候，她就把头埋在玩偶里乖乖的睡觉，只要听到我翻身或者做起来的声音，立马抬头看着我，天真可爱的小眼神和我对视的时候，心都化了。浅浅好像天生会歪头杀，我每次讲话她都会歪着小脑袋看着我，我看新闻说狗狗歪头是因为想听清主人在说什么，原来我的宝贝是急切地想明白我的意思呢。不知道她的小脑瓜整天都在想什么，肯定都是可可爱爱的小想法和吃喝拉撒，但是肯定，也会想我。</p><p>  现在回家浅浅都会闹着让我抱她，一到我怀里就舔我的隔壁和手，听说狗狗舔手是爱你的表现，那我的狗子可给我了太多爱了，毕竟我整个胳膊被她舔的都是狗粮味。</p><p>  我和小浅浅的故事，未完，待续。。。。。。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 我和浅浅专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浅浅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之动态SQL语句实现</title>
      <link href="/2020/11/24/Mybatis%E4%B9%8B%E5%8A%A8%E6%80%81SQL%E8%AF%AD%E5%8F%A5%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/11/24/Mybatis%E4%B9%8B%E5%8A%A8%E6%80%81SQL%E8%AF%AD%E5%8F%A5%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="动态SQL语句实现"><a href="#动态SQL语句实现" class="headerlink" title="动态SQL语句实现"></a>动态SQL语句实现</h2><h3 id="if-查询"><a href="#if-查询" class="headerlink" title="if 查询"></a>if 查询</h3><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlogMapper</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">queryBlogIF</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mapper-xml"><a href="#Mapper-xml" class="headerlink" title="Mapper.xml"></a>Mapper.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allen.dao.BlogMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    根据不同查询条件查询--></span>    <span class="token comment" spellcheck="true">&lt;!--    where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from blog        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and title = #{title}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and author = #{author}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据 xml 文件查询 author 字段值为"保尔"的 Blog</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span><span class="token string">"保尔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryBlogIF</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Blog blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim(where,set)"></a>trim(where,set)</h3><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findActiveBlogLike<span class="token punctuation">"</span></span>     <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM BLOG  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>state !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         state = #{state}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        AND title like #{title}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null and author.name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        AND author_name like #{author.name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 where 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 where 元素的功能。比如，和 where 元素等价的自定义 trim 元素为：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WHERE<span class="token punctuation">"</span></span> <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AND |OR <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>prefixOverrides 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会移除所有 prefixOverrides 属性中指定的内容，并且插入 prefix 属性中指定的内容。</p><h3 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h3><p>用于动态更新语句的类似解决方案叫做 set。set 元素可以用于动态包含需要更新的列，忽略其它不更新的列。比如：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateAuthorIfNecessary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  update Author    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>username=#{username},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>password=#{password},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>email=#{email},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bio !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>bio=#{bio}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>  where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子中，set 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p><p><strong>与 set 元素等价的自定义 trim 元素</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SET<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，我们覆盖了后缀值设置，并且自定义了前缀值。</p><h3 id="choose-和when配合使用"><a href="#choose-和when配合使用" class="headerlink" title="choose(和when配合使用)"></a>choose(和when配合使用)</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><h4 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlogMapper</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">queryBlogChoose</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mapper-xml-1"><a href="#Mapper-xml-1" class="headerlink" title="Mapper.xml"></a>Mapper.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    choose-when 相当于java中的 switch-case--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and title = #{title}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and author = #{author}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>            views = #{views}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlogChoose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当 title 不为 null 时，只返回 title 为 "java so easy"的 Blog,不再往下执行</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"java so easy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"views"</span><span class="token punctuation">,</span><span class="token string">"510"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryBlogChoose</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Blog blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可能想要将一些公共的部分抽取出来，方便复用！  </p><p>1.使用SQL标签抽取公共部分<br>2.在需要使用的地方使用 include 标签引入即可</p><h4 id="Mapper-xml-2"><a href="#Mapper-xml-2" class="headerlink" title="Mapper.xml"></a>Mapper.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    提高代码复用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and title = #{title}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and author = #{author}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--    包含引用sql语句 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意事项：</strong><br>1.最好基于单表定义SQL片段<br>2.不要在SQL片段中使用where标签</p><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        map.put("title","java so easy");</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span><span class="token string">"保尔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryBlogIF</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Blog blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><pre class="line-numbers language-xml"><code class="language-xml">[allen.dao.BlogMapper.queryBlogIF]-==>  Preparing: select * from blog WHERE author = ? [allen.dao.BlogMapper.queryBlogIF]-==> Parameters: 保尔(String)[allen.dao.BlogMapper.queryBlogIF]-&lt;==      Total: 2Blog(id=b29f1be4a8d24ccabe26f316d834f052, title=钢铁是怎样炼成的, author=保尔, createTime=Sun Nov 22 22:50:07 CST 2020, views=510)Blog(id=ba66644c43964e8fa62a0b229bf280df, title=py so easy, author=保尔, createTime=Mon Nov 23 22:06:39 CST 2020, views=20)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><h4 id="接口-2"><a href="#接口-2" class="headerlink" title="接口"></a>接口</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlogMapper</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">queryBlogForeach</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mapper-xml-3"><a href="#Mapper-xml-3" class="headerlink" title="Mapper.xml"></a>Mapper.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    foreach查询--></span><span class="token comment" spellcheck="true">&lt;!--    select * from blog where 1=1 and (id=1 or id=2 or id=3)--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and (<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            id=#{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试1-ids为空"><a href="#测试1-ids为空" class="headerlink" title="测试1 (ids为空)"></a>测试1 (ids为空)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlogForeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">,</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryBlogForeach</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Blog blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出1（注意观察-sql-语句）"><a href="#输出1（注意观察-sql-语句）" class="headerlink" title="输出1（注意观察 sql 语句）"></a>输出1（注意观察 sql 语句）</h4><pre class="line-numbers language-xml"><code class="language-xml">[allen.dao.BlogMapper.queryBlogForeach]-==>  Preparing: select * from blog[allen.dao.BlogMapper.queryBlogForeach]-==> Parameters: [allen.dao.BlogMapper.queryBlogForeach]-&lt;==      Total: 3Blog(id=1, title=钢铁是怎样炼成的, author=保尔, createTime=Sun Nov 22 22:50:07 CST 2020, views=510)Blog(id=2, title=java so easy, author=保尔1, createTime=Mon Nov 23 22:05:53 CST 2020, views=20)Blog(id=3, title=py so easy, author=保尔, createTime=Mon Nov 23 22:06:39 CST 2020, views=20)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试2（ids-传入参数1-2）"><a href="#测试2（ids-传入参数1-2）" class="headerlink" title="测试2（ids 传入参数1,2）"></a>测试2（ids 传入参数1,2）</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlogForeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">,</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryBlogForeach</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Blog blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出2（注意观察-sql-语句）"><a href="#输出2（注意观察-sql-语句）" class="headerlink" title="输出2（注意观察 sql 语句）"></a>输出2（注意观察 sql 语句）</h4><pre class="line-numbers language-xml"><code class="language-xml">[allen.dao.BlogMapper.queryBlogForeach]-==>  Preparing: select * from blog WHERE ( id=? or id=? ) [allen.dao.BlogMapper.queryBlogForeach]-==> Parameters: 1(Integer), 2(Integer)[allen.dao.BlogMapper.queryBlogForeach]-&lt;==      Total: 2Blog(id=1, title=钢铁是怎样炼成的, author=保尔, createTime=Sun Nov 22 22:50:07 CST 2020, views=510)Blog(id=2, title=java so easy, author=保尔1, createTime=Mon Nov 23 22:05:53 CST 2020, views=20)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==动态SQL就是在拼接SQL语句，只要保证SQL的正确性，按照SQL的格式排列即可==</p><p>建议：先在 <strong>Mysql 中写出对应的 SQL</strong> 语句，再对应修改为<strong>动态SQL</strong>语句即可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之万能map</title>
      <link href="/2020/11/24/Mybatis%E4%B9%8B%E4%B8%87%E8%83%BDmap/"/>
      <url>/2020/11/24/Mybatis%E4%B9%8B%E4%B8%87%E8%83%BDmap/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="万能map"><a href="#万能map" class="headerlink" title="万能map"></a>万能map</h2><ol><li>在接口方法中，参数直接传递Map；</li></ol><pre class="line-numbers language-java"><code class="language-java">User <span class="token function">selectUserByNP2</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>编写sql语句的时候，需要传递参数类型，参数类型为map</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUserByNP2<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user where name = #{username} and pwd = #{pwd}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在使用方法的时候，Map的 <strong>key</strong> 为 sql中取的值即可，<strong>没有顺序要求！</strong></li></ol><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUserByNP2</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论</strong>：如果参数过多，我们可以考虑直接使用Map实现，如果参数比较少，直接传递参数即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer26 二叉搜索树与双向链表</title>
      <link href="/2020/11/23/%E5%89%91%E6%8C%87offer26/"/>
      <url>/2020/11/23/%E5%89%91%E6%8C%87offer26/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="剑指offer"><a href="#剑指offer" class="headerlink" title="剑指offer"></a>剑指offer</h2><h3 id="26-二叉搜索树与双向链表"><a href="#26-二叉搜索树与双向链表" class="headerlink" title="26 二叉搜索树与双向链表"></a>26 二叉搜索树与双向链表</h3><hr><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/53109f2e-dc32-4f90-85ad-3fb044219e92.png" alt="双向链表示意图"></p><h5 id="1-调整指针"><a href="#1-调整指针" class="headerlink" title="1.调整指针"></a>1.调整指针</h5><p>原先指向左子节点的指针调整为链表中指向前一个节点的指针</p><p>原先指向右子节点的指针调整为链表中指向后一个节点的指针</p><h5 id="2-如何调整"><a href="#2-如何调整" class="headerlink" title="2.如何调整"></a>2.如何调整</h5><p>考虑根节点和左右子树的基本情况，因为如果用递归，这种基本情况考虑就可以去将同样的方法用到左右子树上</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/e0e190ca-45de-4eb6-8363-c694f930a601.png" alt="基本情况"></p><h5 id="3-调整步骤"><a href="#3-调整步骤" class="headerlink" title="3.调整步骤"></a>3.调整步骤</h5><p>对于这种基本情况，可以分成三个部分来看，根节点10，左子树，右子树，需要做的就是将10与左子树中的最大值连起来，然后把10与右子树中的最小值连起来</p><p>现在有个问题就是我们并不知道左子树中的最大值和右子树中的最小值，如果我们知道就好了。但是想到递归，递归到左子树中，如果左子树已转换为双向链表，那么双向链表的最后一个节点就是我们想要的，而右子树中的第一个节点也是我们想要的</p><p>上面的代码中有两个参数，一个是根节点，一个是已经转换好的链表的最后一个节点，因为二叉搜索树中序遍历的特性，当遍历到根节点的时候，左子树已经排好序了，所以会有一个左子树已经转换好的链表，而这个链表的最后一个节点即是我们需要和根节点左连的节点</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/e0e190ca-45de-4eb6-8363-c694f930a601.png" alt=""></p><p>最开始的时候lastNode为null，current为当前子树的根节点</p><p>如果左子树存在，那么转换左子树，递归下去，递归返回之后，说明找到了链表的第一个节点，也就是4那个节点，将4的前面节点置为null，此时current为4那个节点，这个时候由于6的4这个左子树已遍历完了，所以需要往上层返回，返回之前需要将current赋值给lastNode，说明4这个左子树的最后一个节点就是4</p><p>由于往上返回了一层，此时的current已经是6了，将6的左节点赋值为之前返回的4，判断之前返回的lastNode是否为null，不为空说明需要把根节点和lastNode连起来，其实lastNode为null的情况就只有第一个节点会出现，其他的时候都不会出现。现在已排好序的包括6的左子树以及6本身了，所以此时的lastNode为6</p><p>6和4的双向连接就完成了，由于6的右子树存在，又会递归到右边子树去，由于8不存在左右子树，递归下去一层之后current就是8这个节点，但它的左孩子为空，所以不会左边递归下去，将8的左连接与之前的lastNode连接起来，建立双向连接的一条连接，然后由于lastNode不为空，所以又把lastNode的右连接与8连接起来，至此双向连接建立，此时lastNode为8</p><p>所以468都已排好序，此时lastNode为8，返回到上一层，也就是根节点10了，在这一层current为10，将current的左连接与lastNode连接起来，如果lastNode存在，将lastNode的右连接与10连接一起，以此建立双向连接。至此就将根节点和左子树都连接起来了，然后就是去转换右子树，现在的lastNode为10，current为14，14有左孩子，所以需要递归到下一层，下一层的current为12，12没有左孩子，所以不用在坐递归，所以12是12这棵子树转换成双向链表的最左边的节点，将lastNode与12连接，也就是10与12连接，此时的lastNode就变成了12，再将12的右子树递归，由于没有右子树，所以直接返回到上一层，上一层的current是14,14与已排好序的lastNode连接，也就是12与14连接，然后lastNode变为14，递归到14的右子树，也就current变为16，16再递归左子树，无左子树，将16与14连接，此时的lastNode变为16，递归右子树，无右子树，所以整个递归工作完成</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**public class TreeNode {    int val = 0;    TreeNode left = null;    TreeNode right = null;    public TreeNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//双向链表的左边头结点和右边头节点</span>    TreeNode leftHead <span class="token operator">=</span> null<span class="token punctuation">;</span>    TreeNode rightHead <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">Convert</span><span class="token punctuation">(</span>TreeNode pRootOfTree<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//递归调用 叶子节点 的左右节点返回null</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pRootOfTree<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//左子树递归遍历</span>        <span class="token function">Convert</span><span class="token punctuation">(</span>pRootOfTree<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第一次运行时，使最左边叶子节点为链表第一个节点</span>        <span class="token comment" spellcheck="true">//初始rightHead==null，将根节点 pRootOfTree 赋值给 左、右头节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rightHead<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            leftHead <span class="token operator">=</span> rightHead <span class="token operator">=</span> pRootOfTree<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//后续运行，建立双向连接，将右头节点 rightHead 后移到当前根节点 pRootOfTree</span>            rightHead<span class="token punctuation">.</span>right <span class="token operator">=</span> pRootOfTree<span class="token punctuation">;</span>            pRootOfTree<span class="token punctuation">.</span>left <span class="token operator">=</span> rightHead<span class="token punctuation">;</span>            rightHead <span class="token operator">=</span> pRootOfTree<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//右子树递归遍历</span>        <span class="token function">Convert</span><span class="token punctuation">(</span>pRootOfTree<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> leftHead<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="references"><a href="#references" class="headerlink" title="references"></a>references</h4><p><a href="https://blog.csdn.net/u010312474/article/details/100523321" target="_blank" rel="noopener">https://blog.csdn.net/u010312474/article/details/100523321</a><br><a href="https://blog.csdn.net/weixin_30337251/article/details/95214799" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30337251/article/details/95214799</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉搜索树 </tag>
            
            <tag> 双向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Project - Captcha Recognition</title>
      <link href="/2020/11/23/Machine-Learning-Project/"/>
      <url>/2020/11/23/Machine-Learning-Project/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Captcha-Recognition（GIF验证码自动识别）"><a href="#Captcha-Recognition（GIF验证码自动识别）" class="headerlink" title="Captcha Recognition（GIF验证码自动识别）"></a>Captcha Recognition（GIF验证码自动识别）</h2><hr><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>此次作业通过使用requests库爬取华科统一身份系统登陆页面的GIF验证码，并使用PIL库的Image模块对GIF验证码进行了分解。作业主要工作可分为以下几个主要模块：爬取验证码图片数据模块，灰度处理&amp;二值化模块，降噪模块，图片字符分割模块，素材处理与标记模块，归一化与one-hot编码模块，训练模块，预测和拼接模块，并分别完成这八个模块的设计和实现，最终达到了自动识别GIF验证码的目的。</p><h3 id="软件结构和实现方法"><a href="#软件结构和实现方法" class="headerlink" title="软件结构和实现方法"></a>软件结构和实现方法</h3><p>操作系统为Windows8系统，python版本是3.7，所用到的模块如下：</p><ul><li>PIL：用来分解GIF</li><li>Scikit-learn：用来训练和调用神经网络模型</li><li>NumPy：处理数据</li><li>Pandas：处理数据</li></ul><p>编写的函数及功能如下：</p><ul><li>data_preprocessing.py: 数据爬取和预处理（灰度处理、二值化、降噪）</li><li>img_2_csv.py: img图片转csv数据</li><li>captcha_train.py: 模型训练</li><li>predict.py: 预测和识别验证码</li><li>main.py: 主函数</li></ul><h3 id="数据描述"><a href="#数据描述" class="headerlink" title="数据描述"></a>数据描述</h3><p>创建0-9十个文件夹，清除爬取的无效字符（空白或干扰）图片，并把处理后的图片手动归类到0-9十个不同的文件夹下，便于训练和测试。<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/d2dc1bfd-1d8d-4305-a25a-ec4c6ed6bf4a.png" alt="图1 训练集"></p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/2308d94e-70f6-4c97-8c5d-99abaf78c771.png" alt="图2 部分归类图片"></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1-爬取验证码图片数据"><a href="#1-爬取验证码图片数据" class="headerlink" title="1.爬取验证码图片数据"></a>1.爬取验证码图片数据</h4><p>首先爬取GIF验证码，使用第三方库requests库爬取华科统一身份验证网页的GIF验证码，使用PIL库的Image模块对GIF分解（一张GIF分解为四张PNG图片）。</p><h4 id="2-灰度处理-amp-二值化"><a href="#2-灰度处理-amp-二值化" class="headerlink" title="2.灰度处理&amp;二值化"></a>2.灰度处理&amp;二值化</h4><p>灰度处理：在PIL中，从模式”RGB”转为”L”模式是按照下面公式转换L=R* 299/1000 + G * 587/1000+ B*114/1000，此时每个像素点有8位表示，即0-255.为了降噪，需要对图片二值化处理，处理完后每个像素点仅有1位表示，即0或1.</p><p>二值化：使用point方法进行二值化，阈值设为200.</p><h4 id="3-降噪"><a href="#3-降噪" class="headerlink" title="3.降噪"></a>3.降噪</h4><p>本文使用九宫格法进行降噪，降噪步骤为：<br>1).对某个黑点周边的九宫格里面的黑色点计数<br>2).如果黑色点少于4个则证明此点为孤立点，然后得到所有的孤立点（本文中黑色点少于4去噪效果最好）<br>3).对所有孤立点一次批量移除</p><h4 id="4-图片字符分割"><a href="#4-图片字符分割" class="headerlink" title="4.图片字符分割"></a>4.图片字符分割</h4><p>使用图像编辑软件（Photoshop或者其它）打开验证码图片，放大到像素级别，观察其它一些参数特点：可以得到如下参数：</p><ul><li>整个图片尺寸是90*58</li><li>单个字符尺寸是16*20</li><li>左右字符相距5个像素</li><li>字符上下距边缘19个像素</li></ul><h4 id="5-素材处理与标记"><a href="#5-素材处理与标记" class="headerlink" title="5.素材处理与标记"></a>5.素材处理与标记</h4><p>素材处理与标记的结果见数据描述，创建0-9十个文件夹，清除爬取的无效字符（空白或干扰）图片，并把处理后的图片手动归类到0-9十个不同的文件夹下，便于训练和测试。</p><h4 id="6-归一化与one-hot编码"><a href="#6-归一化与one-hot编码" class="headerlink" title="6.归一化与one-hot编码"></a>6.归一化与one-hot编码</h4><p>对输入的训练集和测试集进行归一化：像素值/255对于输出采用0-9十个字符表示，并将其进行one-hot编码。</p><h4 id="7-训练"><a href="#7-训练" class="headerlink" title="7.训练"></a>7.训练</h4><p>使用scikit-learn库的MLPClassifier(多层感知器分类模型)进行训练，输入为16<em>20共320个神经元，隐含层为32</em>32的双隐含层，输出为10*1的One-hot编码。具体训练参数如下：</p><ul><li>solver=’sgd’：采用随机梯度下降算法进行训练</li><li>activation=’relu’</li><li>alpha=1e-5</li><li>hidden_layer_sizes=(32,32)：隐含层有32*32个神经元，代表第一隐含层32个神经元，第2隐含层32个神经元。</li><li>tol=1e-5</li><li>random_state=1</li><li>max_iter=100</li><li>verbose=10</li><li>learning_rate_init=0.1：学习率初始化为0.1</li></ul><p>多层感知器网络（前馈网络）原理如下：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/de446bfd-611a-4182-8c47-ad22c5dfe335.png" alt="图3 前馈网络原理图"></p><p>$w_{jk}^{l}$为第$l$层上第$j$个神经元与上一层第$k$个神经元输出之间相对应的权重，$W$表示权重矩阵。<br>$a_j^l$ 表示第$l$层第$j$个神经元的输出，$A$表示输出矩阵。<br>$z_j^l$ 表示第$l$层第$j$个神经元的输入，$Z$表示输入矩阵。<br>$b_j^l$ 表示第$l$层第$j$个神经元的偏置，$B$表示偏置矩阵。</p><p>权重矩阵可写作：$w^l=$</p><p>$$\begin{bmatrix}<br>{a_{1,1}^{l}}&amp;{a_{2,1}^{l}}&amp;{\cdots}&amp;{a_{32,1}^{l}}\<br>{a_{1,2}^{l}}&amp;{a_{2,2}^{l}}&amp;{\cdots}&amp;{a_{32,2}^{l}}\<br>{\vdots}&amp;{\vdots}&amp;{\ddots}&amp;{\vdots}\<br>{a_{1,320}^{l}}&amp;{a_{2,320}^{l}}&amp;{\cdots}&amp;{a_{32,320}^{l}}\<br>\end{bmatrix}$$</p><p>以节点$2j$（第2行第$j$个节点）为例，输入信号为：$Z_j^2=\sum_{i=1}^{320}w_{jk}^2a_j^1+b_j^2$</p><p>用矩阵来描述即：</p><p>$$Z^2=W^2A^1+B^2$$</p><p>隐藏层节点经过非线性变换后的输出表示如下：</p><p>$$A^2=\text{sigmoid}(Z^2)$$</p><p>输入信号在权重矩阵们的帮助下，得到每一层的输出，最终到达输出层。</p><h4 id="8-预测和拼接"><a href="#8-预测和拼接" class="headerlink" title="8.预测和拼接"></a>8.预测和拼接</h4><p>完整识别流程为：<br>1）    爬取GIF并分解<br>2）    灰度处理&amp;二值化<br>3）    去噪<br>4）    图片转CSV数据<br>5）    使用训练好的模型预测，拼接<br>拼接流程以GIF验证码“7786”为例:<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/df7cf884-505f-4eb1-99ec-6ca698f70b37.png" alt="图4 验证码样例"></p><p>爬取GIF，经过分解，灰度处理，二值化后得到图4所示四张PNG图片，验证码预测结果拼接代码如下图5所示：</p><ul><li>若3.png的前两位等于2.png的前两位，或1.png的前两位等于2.png的前两位，则：前两位取2.png的前两位；</li><li>否则，取3.png的前两位。</li></ul><p>后两位则直接取0.png的后两位。</p><pre class="line-numbers language-py"><code class="language-py"># 拼接# 前两位if crack_result.get('4')[:2] == crack_result.get('3')[:2] or crack_result.get('2')[:2] == crack_result.get('3')[:2]:    final_result = crack_result.get('3')[:2]else:    final_result = crack_result.get('4')[:2]# 后两位final_result += crack_result.get('1')[-2:]print(f'final_result: {final_result}')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>根据预测结果重命名10张GIF，程序运行结果如图5所示：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/095c659a-7efc-4925-972e-c1447636fa6b.png" alt="图5 程序运行结果"></p><p>命名后的GIF如图6所示。<br>注：由于是GIF动图，因此在截图后无法显示完整验证码信息。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/88c313ef-e557-47ad-8e06-d659cdda11cb.png" alt="图6 命名后结果"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>通过对字符图片的训练，测试数据集达到了100%的准确率，此次利用机器学习识别GIF验证码有着很不错的效果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis环境搭建</title>
      <link href="/2020/11/23/Mybatis-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/11/23/Mybatis-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Mybatis环境搭建"><a href="#Mybatis环境搭建" class="headerlink" title="Mybatis环境搭建"></a>Mybatis环境搭建</h2><hr><h3 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h3><ul><li><p>MyBatis 是一款优秀的持久层框架</p></li><li><p>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</p></li><li><p>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</p></li><li><p>Mybatis官方文档 : <a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/index.html</a></p></li><li><p>GitHub : <a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3</a></p></li></ul><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p><ul><li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li><li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li></ul><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p><ul><li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li><li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li></ul><h4 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h4><p><strong>什么是持久层？</strong></p><ul><li>完成持久化工作的代码块 .  —-&gt;  dao层 【DAO (Data Access Object)  数据访问对象】</li><li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种关系数据库来完成。</li><li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专注于数据持久化逻辑的实现.</li><li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。【说白了就是用来操作数据库存在的！】</li></ul><h4 id="为什么需要-Mybatis"><a href="#为什么需要-Mybatis" class="headerlink" title="为什么需要 Mybatis?"></a>为什么需要 Mybatis?</h4><ul><li>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</li><li>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等… , 通过框架可以减少重复代码,提高开发效率 .</li><li>MyBatis 是一个半自动化的ORM框架 (Object Relationship Mapping) –&gt;对象关系映射</li><li>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！</li></ul><hr><h3 id="Mybatis搭建步骤："><a href="#Mybatis搭建步骤：" class="headerlink" title="Mybatis搭建步骤："></a>Mybatis搭建步骤：</h3><p>新建项目 –&gt; 不使用模版直接创建 –&gt; 删除src –&gt; 添加pom.xml依赖 –&gt; 新建maven子模块（子模块 pom.xml 可继承父工程依赖）</p><h4 id="1-搭建实验数据库"><a href="#1-搭建实验数据库" class="headerlink" title="1.搭建实验数据库"></a>1.搭建实验数据库</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>mybatis<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>mybatis<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>mybatis<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pwd<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pwd<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'狂神'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'abcdef'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'987654'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-导入MyBatis和Mysql相关-jar-包（GitHub上找）"><a href="#2-导入MyBatis和Mysql相关-jar-包（GitHub上找）" class="headerlink" title="2.导入MyBatis和Mysql相关 jar 包（GitHub上找）"></a>2.导入MyBatis和Mysql相关 jar 包（GitHub上找）</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--junit test --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-编写MyBatis核心配置文件（查看帮助文档）（mybatis-config-xml），引入db-properties-优化连接命名。"><a href="#3-编写MyBatis核心配置文件（查看帮助文档）（mybatis-config-xml），引入db-properties-优化连接命名。" class="headerlink" title="3.编写MyBatis核心配置文件（查看帮助文档）（mybatis-config.xml），引入db.properties, 优化连接命名。"></a>3.编写MyBatis核心配置文件（查看帮助文档）（mybatis-config.xml），引入db.properties, 优化连接命名。</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration       PUBLIC "-//mybatis.org//DTD Config 3.0//EN"       "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>utf8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1005<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/kuang/dao/userMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-编写MyBatis工具类（查看帮助文档），获取connection"><a href="#4-编写MyBatis工具类（查看帮助文档），获取connection" class="headerlink" title="4.编写MyBatis工具类（查看帮助文档），获取connection."></a>4.编写MyBatis工具类（查看帮助文档），获取connection.</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtils</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token punctuation">{</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>           InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>           sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//获取SqlSession连接</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//return sqlSessionFactory.openSession(true); 默认自动提交</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-创建实体类-User-可引入-lombok-依赖"><a href="#5-创建实体类-User-可引入-lombok-依赖" class="headerlink" title="5.创建实体类 User  (可引入 lombok 依赖)"></a>5.创建实体类 <strong>User</strong>  (可引入 lombok 依赖)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//id</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//姓名</span>   <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//密码</span>   <span class="token comment" spellcheck="true">//构造,有参,无参</span>   <span class="token comment" spellcheck="true">//set/get</span>   <span class="token comment" spellcheck="true">//toString()</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-编写UserMapper接口类"><a href="#6-编写UserMapper接口类" class="headerlink" title="6.编写UserMapper接口类"></a>6.编写<strong>UserMapper</strong>接口类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>   List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-编写UserMapper-xml配置文件（namespace-十分重要，不能写错！）"><a href="#7-编写UserMapper-xml配置文件（namespace-十分重要，不能写错！）" class="headerlink" title="7.编写UserMapper.xml配置文件（namespace 十分重要，不能写错！）"></a>7.编写<strong>UserMapper.xml</strong>配置文件（<strong>namespace 十分重要</strong>，不能写错！）</h4><p><strong>注意：</strong> UserMapper.xml 与 UserMapper 接口 <strong>最好放在同一个包下</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper       PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"       "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from user <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-编写测试类（Junit-包测试）"><a href="#8-编写测试类（Junit-包测试）" class="headerlink" title="8.编写测试类（Junit 包测试）"></a>8.编写测试类（Junit 包测试）</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       SqlSession session <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//方法一:</span>       <span class="token comment" spellcheck="true">//List&lt;User> users = session.selectList("com.kuang.mapper.UserMapper.selectUser");</span>       <span class="token comment" spellcheck="true">//方法二:</span>       UserMapper mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>User user<span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="完整的Mybatis配置框架"><a href="#完整的Mybatis配置框架" class="headerlink" title="完整的Mybatis配置框架"></a>完整的Mybatis配置框架</h3><h4 id="项目结构图"><a href="#项目结构图" class="headerlink" title="项目结构图"></a>项目结构图</h4><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/d2af1536-0757-47a2-b808-0ac6115aa0d4.png" alt="项目结构图"></p><h4 id="项目-pom-xml-配置"><a href="#项目-pom-xml-配置" class="headerlink" title="项目 pom.xml 配置"></a>项目 pom.xml 配置</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- parent project --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.allen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>MyMybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    child module  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>mybatis-01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>mybatis-02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>mybatis-03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>mybatis-04<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>mybatis-05<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mysql驱动--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mybatis--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--junit--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--  LOG4J--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--在build中配置resources，防止资源导出失败--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  配置编译器版本 JDK12  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模块-pom-xml-配置"><a href="#模块-pom-xml-配置" class="headerlink" title="模块 pom.xml 配置"></a>模块 pom.xml 配置</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>MyMybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.allen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-04<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="resources-下-mybatis-config-xml-核心配置文件"><a href="#resources-下-mybatis-config-xml-核心配置文件" class="headerlink" title="resources 下 mybatis-config.xml(核心配置文件)"></a>resources 下 mybatis-config.xml(核心配置文件)</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    引入外部配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- log output --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    可以给实体类起别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;typeAlias type="com.allen.pojo.User" alias="User"/>  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allen.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 将该包下 allen.pojo.User 实体类名称 变为 user --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allen.dao.TeacherMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allen.dao.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="resources-下的-db-properties-配置"><a href="#resources-下的-db-properties-配置" class="headerlink" title="resources 下的 db.properties 配置"></a>resources 下的 db.properties 配置</h4><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">driver</span><span class="token punctuation">:</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">:</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis02?useSSL=true&amp;characterEncoding=utf-8&amp;useUnicode=true</span><span class="token attr-name">username</span><span class="token punctuation">:</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">:</span><span class="token attr-value">1005</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="resources-下的-log4j-properties-配置"><a href="#resources-下的-log4j-properties-配置" class="headerlink" title="resources 下的 log4j.properties 配置"></a>resources 下的 log4j.properties 配置</h4><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG,console,file</span><span class="token comment" spellcheck="true">#控制台输出的相关设置</span><span class="token attr-name">log4j.appender.console</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.console.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out</span><span class="token attr-name">log4j.appender.console.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.console.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%c]-%m%n</span><span class="token comment" spellcheck="true">#文件输出的相关设置</span><span class="token attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.RollingFileAppender</span><span class="token attr-name">log4j.appender.file.File</span><span class="token punctuation">=</span><span class="token attr-value">./log/allen.log</span><span class="token attr-name">log4j.appender.file.MaxFileSize</span><span class="token punctuation">=</span><span class="token attr-value">10mb</span><span class="token attr-name">log4j.appender.file.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.file.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%p]allen:[%d{yy-MM-dd}][%c]%m%n</span><span class="token comment" spellcheck="true">#日志输出级别</span><span class="token attr-name">log4j.logger.org.mybatis</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.Statement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.ResultSet</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.PreparedStatement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="src-–-gt-main-–-gt-java-–-gt-allen-–-gt-utils-下-MybatisUtils-工具类-获取Connection"><a href="#src-–-gt-main-–-gt-java-–-gt-allen-–-gt-utils-下-MybatisUtils-工具类-获取Connection" class="headerlink" title="src –> main –> java –> allen –> utils 下 MybatisUtils 工具类(获取Connection)"></a>src –&gt; main –&gt; java –&gt; allen –&gt; utils 下 MybatisUtils 工具类(获取Connection)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> allen<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author Allen * @date 2020/11/12 16:40 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtils</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用Mybatis第一步：获取sqlSessionFactory对象</span>            String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>            InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span>    <span class="token comment" spellcheck="true">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span>    <span class="token comment" spellcheck="true">// 可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。例如：</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="常见问题说明"><a href="#常见问题说明" class="headerlink" title="常见问题说明"></a>常见问题说明</h3><ul><li><p>Maven静态资源过滤问题(pom.xml)</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在build中配置resources，防止资源导出失败--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注册配置文件（mybatis-config.xml）</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--  每一个Mapper.xml都需要在mybatis核心配置文件中注册--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/allen/dao/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置JDK版本(pom.xml)</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--  配置编译器版本 JDK12(根据自己的JDK版本修改)  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>UserMapper.xml配置文件（接口名称）, <strong>namespace 不能写错，注意路径用 . 分隔</strong></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper       PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"       "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.allen.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.allen.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          select * from user     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer25 复杂链表的复制</title>
      <link href="/2020/11/21/%E5%89%91%E6%8C%87offer25/"/>
      <url>/2020/11/21/%E5%89%91%E6%8C%87offer25/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="剑指offer"><a href="#剑指offer" class="headerlink" title="剑指offer"></a>剑指offer</h2><h3 id="25-复杂链表的复制"><a href="#25-复杂链表的复制" class="headerlink" title="25 复杂链表的复制"></a>25 复杂链表的复制</h3><hr><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针random指向一个随机节点），请对此链表进行深拷贝，并返回拷贝后的头结点。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>第一步，在原节点后面创建一个相同的节点，其实就是链表插入的过程;</li></ul><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/870c307f-d5b3-48dc-82ff-9b0c0413e0ee.png" alt="insert same node"></p><ul><li>第二步，遍历克隆的节点，让它的random等于原来的随机的next，也就是下一个节点;</li></ul><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/da6ebc1c-a92e-469a-85ca-a84712a0ba44.png" alt="copy random pointer"></p><ul><li>第三步，遍历整个克隆完毕的链表，让当前点指向下面隔一个的点.</li></ul><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/5bc0f732-c7d6-4b87-b4c4-eef92e1591b5.png" alt="split"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*public class RandomListNode {    int label;    RandomListNode next = null;    RandomListNode random = null;    RandomListNode(int label) {        this.label = label;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> RandomListNode <span class="token function">Clone</span><span class="token punctuation">(</span>RandomListNode pHead<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pHead<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token keyword">return</span> null<span class="token punctuation">;</span>        RandomListNode cur <span class="token operator">=</span> pHead<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// insert same node</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            RandomListNode cloneNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomListNode</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>            cloneNode<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cloneNode<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cloneNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// insert random pointer</span>        cur <span class="token operator">=</span> pHead<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            RandomListNode cloneNode2 <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>random<span class="token operator">!=</span>null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// random pointer is possible null</span>                cloneNode2<span class="token punctuation">.</span>random <span class="token operator">=</span> cur<span class="token punctuation">.</span>random<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cloneNode2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// split</span>        cur <span class="token operator">=</span> pHead<span class="token punctuation">;</span>        RandomListNode resultHead <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            RandomListNode cloneNode3 <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cloneNode3<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cloneNode3<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// move one node once, split to two RandomListNode.</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> resultHead<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h4><p><a href="https://blog.csdn.net/qq_41901915/article/details/90286802" target="_blank" rel="noopener">click here</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer24	二叉树中和为某一值的路径</title>
      <link href="/2020/11/21/%E5%89%91%E6%8C%87offer24/"/>
      <url>/2020/11/21/%E5%89%91%E6%8C%87offer24/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="剑指offer"><a href="#剑指offer" class="headerlink" title="剑指offer"></a>剑指offer</h2><h3 id="24-二叉树中和为某一值的路径"><a href="#24-二叉树中和为某一值的路径" class="headerlink" title="24    二叉树中和为某一值的路径"></a>24    二叉树中和为某一值的路径</h3><hr><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一颗二叉树的根节点和一个整数，按字典序打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p><h4 id="思路（递归、DFS）"><a href="#思路（递归、DFS）" class="headerlink" title="思路（递归、DFS）"></a>思路（递归、DFS）</h4><p>首先思考节点值的和为输入的整数，每条路径都一定是从根节点到叶子节点，<br>在数据结构中从根节点到叶子节点的遍历称之为深度优先遍历DFS。因此整个过程可以采用先序遍历方式的DFS，即根节点》左子树》右子树。</p><p>随后考虑一次遍历完成后的处理，当一次遍历完成后，如果输入整数值恰好等于节点值之和，则输出这条路径并且回退一个节点；<br>如果不等于则直接回退一个节点，即回退到当前节点的父节点，如果该父节点有右孩子，则继续遍历，否则继续回退。</p><p>考虑回退到根节点，此时如果它有右孩子，则继续遍历，否则整个DFS结束。</p><h4 id="数据结构分析"><a href="#数据结构分析" class="headerlink" title="数据结构分析"></a>数据结构分析</h4><p>采用<strong>ArrayList&lt;ArrayList<integer>&gt;</integer></strong>，举个如下的例子，输入整数为22。<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/29226049-7b83-4bd1-8f3c-bd4fab938856.png" alt="示例"></p><p>第一次遍历 10,5,4   19&lt;22，因此ArrayList要使用remove函数回退到父节点5上，开始寻找右孩子。</p><p>第二次遍历 10,5,7   22=22，此时正好输出这条路径（将路径添加到ArrayList中），10,5,7，回退到父节点5上，此时5的左右孩子都已遍历完成，因此回退到父节点10</p><p>第三次遍历 10,12   22=22，此时正好输出这条路径（将路径添加到ArrayList中），10,12，由于12没有左右孩子，因此直接回退到父节点10</p><p>由于根节点10左右孩子都已遍历完成，因此整个DFS结束。</p><p>需要注意的是不论路径的值是否等于输入整数值，都要回退，即使用remove函数移除路径上的最后一个节点。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**public class TreeNode {    int val = 0;    TreeNode left = null;    TreeNode right = null;    public TreeNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> pathList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">FindPath</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span>             <span class="token keyword">return</span> pathList<span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token operator">==</span>null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right<span class="token operator">==</span>null <span class="token operator">&amp;&amp;</span> target<span class="token operator">==</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            pathList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span>            <span class="token function">FindPath</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token operator">-</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val<span class="token operator">&lt;=</span> target<span class="token punctuation">)</span>            <span class="token function">FindPath</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token operator">-</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pathList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h4><p><a href="https://blog.csdn.net/u014525494/article/details/80978647" target="_blank" rel="noopener">https://blog.csdn.net/u014525494/article/details/80978647</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>诗集</title>
      <link href="/2020/11/21/%E8%AF%97%E9%9B%86/"/>
      <url>/2020/11/21/%E8%AF%97%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center><font face="楷体" color="gray" size="6">诗 集</font></center><center><font face="楷体" color="#1e90ff" size="3">作者：<b>假如苏子还在</b></font></center><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1376873330&amp;auto=1&amp;height=66"></iframe></center><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=32924132&amp;auto=1&amp;height=66"></iframe></center><hr><center><font face="楷体" size="5">《点绛唇 • 新月无声》</font></center><div style="text-align: center;"><font face="楷体" size="4">新月无声，几许伤春欲向晚。数峰清苦，冷蕊衡窗瘦。<br></font></div><div style="text-align: center;"><font face="楷体" size="4">佳人不眠，只把想思染。君知否？梦回之后，兴归桃花酒。</font></div><hr><center><font face="楷体" size="5">《蝶恋花（其三）》</font></center><center><font face="楷体" size="4">    风雪不愔离人苦。几度流光，隐隐已归去。<br>    梨花落尽扣瓶颈，心字檀香泪打断。<br>    欲点灯花却向晚。不应凄迷，年少愁不赋。<br>    嫁与山河千万里，从此不眠逗寒兔。</font></center><hr><center><font face="楷体" size="5">《月》</font></center><center><font face="楷体" size="4">    琼花脉脉不语，醉眼微微低垂。灯花缠绵悄无言。<br>    一曲满庭月，疑是地上霜。<br>      犹记苏子探问，宫阙今夕何年。人间晃荡不成样。<br>      月兔衔相思，梦里远相望。</font></center><hr><center><font face="楷体" size="5">《蝶恋花（其二）》</font></center><center><font face="楷体" size="4">    夜来捧书千万卷。纵有情深，字字何处落。<br>    人道七月烟雨晚，花抱浓愁无好梦。<br>    拟效前人图一醉。佳人不在，海棠却依旧。<br>    依身附纸被吹乱，梨花满地无人管。</font></center><hr><center><font face="楷体" size="5">《蝶恋花（其一）》</font></center><center><font face="楷体" size="4">    楼高烟雨几朦胧，檀香点点，兰草偷泣露。<br>    花尽芬芳不知愁，悄盼多情再停留。<br>    夜来春光无处寻，斯人心烧，独影却辜负。<br>    千言锦书红线附，天高水远寄何处。</font></center><hr><center><font face="楷体" size="5">《春景》</font></center><center><font face="楷体" size="4">    陌堤垂柳蘸春水，莺啄花红嘴含香。<br>    桥下鸳鸯点绿皱，一双游去又一双。<br>    提裙回扇半卷帘，美人含羞露新妆。<br>    不知好景君可见，昨宵梦中又相逢。</font></center><hr><center><font face="楷体" size="5">《与君语》</font></center><center><font face="楷体" size="4">    朱颜不辞心已瘦<br>    风雨依旧不知愁<br>    一曲新词一壶酒<br>    落笔词牌杯中游<br><br>      十里烟雨几重重<br>    相思曲不休<br>    歌舞向来自风流<br>    微醺再饮一杯否<br><br>    桃花何故染愁肠<br>    欲说又还休<br>    浮光掠影惊鸿起<br>    盈满花间袖<br><br>    琵琶声荡杯中酒<br>    灯花愿逐春水流<br>    敢问郎君归不归<br>    风乍起<br>    只见庭院葳蕤，花色依旧</font></center><hr><center><font face="楷体" size="5">《午梦惊雨醒后作》</font></center><center><font face="楷体" size="4">    帘卷春梦，一曲滂沱高奏了，花容芳菲。乍晴推窗却惊见，尘间雨披生辉。<br>    欲与诉说，唯共清风心相对，悄无声言。怎会扰梦梁下燕，飞去何时还回？</font></center><hr><center><font face="楷体" size="5">《桃夭》</font></center><center><font face="楷体" size="4">    繁花灼燃终落尽，<br>    凭栏遥望玉生烟。<br>    春去春来不留意，<br>    怕君不恋醉花阴。</font></center><hr><center><font face="楷体" size="5">《灯约》</font></center><center><font face="楷体" size="4">    案前独坐烛微亮，<br>    子兰轻垂暗含香。<br>    满纸落墨我微醺，<br>    灯花摇曳莫相忘。</font></center><hr><center><font face="楷体" size="5">《慰藉》</font></center><center><font face="楷体" size="4">    这个时刻，<br>    好像一切都没变。<br>    一样的轮回，一样的荣枯，<br>    一样的不可预知。<br>    只是我，渐渐的竟看到了花的梦魇。<br><br>    诗不成诗，人不像人。<br>    那清清浅浅的世故，<br>    该如何借我去走到未知的暮年。<br><br>    雨落下的伞不再如莲，<br>      阵阵的风迎合着骚动的魂。<br>      那清如镜的湖面啊，<br>      为何你不肯映出完整的影，<br><br>    重复着破镜不能够重圆。<br>      也许本该笑的明艳，<br>    而如今这些许的文字，<br>    已是我不知从何起始的冬日里<br>    最后的春。</font></center><hr><center><font face="楷体" size="5">《清高》</font></center><center><font face="楷体" size="4">    我站在天台踩醒了黑夜，<br>    蝉鸣声唤醒了树的欲望。<br>      夏天的歌还笙声不绝，<br>      疯跳的心脏，狂傲膨胀。<br><br>    偷一把星光，揉进心事，<br>      一半悲伤，一半发烫。<br>      转身不看这份清高，<br>      冰冷的灵魂，睡裙下荡漾。<br><br>    放纵自己肆意张扬，<br>      看着人间摇摇晃晃。<br>    远处的烟火依然苦涩，<br>    我把星光，还给天上。</font></center><hr><center><font face="楷体" size="5">《爱慕》</font></center><center><font face="楷体" size="4">    我坐在树下的阶台上<br>    后边尽是蔓草青青<br>    路灯下的影子被拉的好长<br>    歌声在夜晚的灵魂里荡漾着<br>    替我们回忆着被蜘蛛网尘封的故事<br><br>    风穿透我的心<br>    我听见夜晚苏醒的声音<br>    他告诉我说“今晚的月色好美”<br>    湖边的柳絮停住了<br>    他知道，樱花在晚间看不清他飞去的方向<br><br>    我取下一片掉在我头发上的叶子<br>    鬓角的发影投射在上边<br>      两个不相知的生命，两两相对<br>      他躺在我的手心上，透过月光<br>      我看见他，竟红了半边脸</font></center><hr><center><font face="楷体" size="5">《菩萨蛮•新寒冷月仍沽酒》</font></center><center><font face="楷体" size="4">新寒冷月仍沽酒，<br>隔年诗章断谁肠。<br>一杯浊酒魂，<br>两道红泪痕。<br>今又醉酒卧，<br>万般愁思过。<br>痴言如梦时，<br>日日盼君归。</font></center><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诗集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Git上传代码到Github仓库</title>
      <link href="/2019/12/29/%E4%BD%BF%E7%94%A8Git%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E5%88%B0Github%E4%BB%93%E5%BA%93/"/>
      <url>/2019/12/29/%E4%BD%BF%E7%94%A8Git%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E5%88%B0Github%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用Git上传代码到Github仓库"><a href="#使用Git上传代码到Github仓库" class="headerlink" title="使用Git上传代码到Github仓库"></a>使用Git上传代码到Github仓库</h2><p><em>转载自：<a href="https://www.cnblogs.com/mr-wuxiansheng/p/6974170.html" target="_blank" rel="noopener">https://www.cnblogs.com/mr-wuxiansheng/p/6974170.html</a></em></p><h3 id="若创建新的仓库"><a href="#若创建新的仓库" class="headerlink" title="若创建新的仓库"></a>若创建新的仓库</h3><p>1.首先需要在github中新建一个仓库</p><p>2.在本地文件夹下使用git初始化仓库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.将项目的所有文件添加到仓库中(注意英文的 .)</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.提交到github仓库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"commit msg"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.将本地仓库与远端github仓库关联，后面的https改成自己新建的仓库https地址</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin https://github.com/xxx/yyy.git<span class="token function">git</span> pull origin master<span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此，本地代码已保存到远端的github仓库，刷新远端仓库即可</p><h3 id="若提交到以前的仓库"><a href="#若提交到以前的仓库" class="headerlink" title="若提交到以前的仓库"></a>若提交到以前的仓库</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add *<span class="token function">git</span> commit -m <span class="token string">"commit msg"</span><span class="token function">git</span> pull origin master<span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="若提交git-push-时出现-Updates-were-rejected-because…-错误"><a href="#若提交git-push-时出现-Updates-were-rejected-because…-错误" class="headerlink" title="若提交git push 时出现 Updates were rejected because… 错误"></a>若提交git push 时出现 Updates were rejected because… 错误</h4><p>出现此情况，一般需要先pull，再push，把远程分支上的提交合并到本地分支之后再push。<br>如果你确定远程分支上那些提交都不需要了，那么使用如下命令，强行让本地分支覆盖远程分支(这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候)。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push origin master -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，可以这样修改：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> pull origin master<span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$ git push -u origin master 命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git Github 来自转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工神经网络之BP语音识别</title>
      <link href="/2019/10/30/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8BBP%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/"/>
      <url>/2019/10/30/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8BBP%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题及要求"><a href="#问题及要求" class="headerlink" title="问题及要求"></a>问题及要求</h2><p>语音特征识别是模式识别的一个重要研究内容，对本案例，提取了民歌，古筝、摇滚和流行四类不同音乐的24维特征向量各500组，希望用BP/RBF网络实现对着四类音乐的有效分类。  </p><p>数据文件见附件，语音特征信号分类.zip, 其中，datai.mat(i=1:4)分别代表4类音乐的特征数据，数据长度为500*25，其中第一列代表类别，分别为1~4.  </p><p>要求：<br>1)利用其中1500为训练数据，500为测试数据，检验分类效果；<br>2)比较采用2-3种不同的隐含层神经元个数对分类精度的影响；<br>3)采用不同训练算法，比较traingd，traingdm，traingdx以及trainlm的效果（精度和锁链速度）。  </p><p>要求给出源程序和神经网络结构示意图，计算结果及分析。  </p><p><a href="http://image-hlgao.test.upcdn.net/data/data.zip" target="_blank" rel="noopener">附件(.mat文件)</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>该神经网络结构为输入层为24个神经元，隐含层有1层，神经元个数未定，输出层有4个神经元，神经网络结构如图1所示。<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/ff0d2ca7-0e76-44da-b3f3-0e75d95ea18e.jpg" alt="图1 神经网络结构"></p><h2 id="Matlab程序"><a href="#Matlab程序" class="headerlink" title="Matlab程序"></a>Matlab程序</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">%</span>用BP网络语音识别close all<span class="token punctuation">;</span>clear all<span class="token punctuation">;</span>clc<span class="token punctuation">;</span><span class="token operator">%</span>训练集<span class="token operator">%</span>训练数据预测数据提取及归一化<span class="token operator">%</span>下载四类语音信号load data1 c1load data2 c2load data3 c3load data4 c4<span class="token operator">%</span>四个特征信号矩阵合成一个矩阵<span class="token function">data</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token number">501</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">c2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token operator">:</span><span class="token number">1500</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">c3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token number">1501</span><span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">c4</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span>获取当前时间t1 <span class="token operator">=</span> clock<span class="token punctuation">;</span> <span class="token operator">%</span>从<span class="token number">1</span>到<span class="token number">2000</span>间随机排序k<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">sort</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span>输入输出数据input<span class="token operator">=</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output1 <span class="token operator">=</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span>把输出从<span class="token number">1</span>维变成<span class="token number">4</span>维output<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2000</span>    <span class="token keyword">switch</span> <span class="token function">output1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token number">1</span>            <span class="token function">output</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span>            <span class="token function">output</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span>            <span class="token function">output</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span>            <span class="token function">output</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    endend<span class="token operator">%</span>随机提取<span class="token number">1500</span>个样本为训练样本，<span class="token number">500</span>个样本为预测样本input_train<span class="token operator">=</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>'<span class="token punctuation">;</span>output_train<span class="token operator">=</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>'<span class="token punctuation">;</span>input_test<span class="token operator">=</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">1501</span><span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>'<span class="token punctuation">;</span>output_test<span class="token operator">=</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">1501</span><span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>'<span class="token punctuation">;</span><span class="token operator">%</span> 网络结构初始化innum<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">;</span>midnum<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">;</span>outnum<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">%</span>创建网络net <span class="token operator">=</span> <span class="token function">newff</span><span class="token punctuation">(</span><span class="token function">minmax</span><span class="token punctuation">(</span>input_train<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>midnum<span class="token punctuation">,</span>outnum<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'tansig'</span> <span class="token string">'purelin'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'trainlm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">%</span>训练函数可选项：<span class="token string">'trainlm'</span><span class="token punctuation">,</span> <span class="token string">'traingd'</span><span class="token punctuation">,</span> <span class="token string">'traingdm'</span><span class="token punctuation">,</span> <span class="token string">'traingdx'</span>net<span class="token punctuation">.</span>trainParam<span class="token punctuation">.</span>epochs <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>net<span class="token punctuation">.</span>iw<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>midnum<span class="token punctuation">,</span>innum<span class="token punctuation">)</span><span class="token punctuation">;</span>net<span class="token punctuation">.</span>b<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>midnum<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>net<span class="token punctuation">.</span>b<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>outnum<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span>训练net <span class="token operator">=</span> <span class="token function">train</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span>input_train<span class="token punctuation">,</span>output_train<span class="token punctuation">)</span><span class="token punctuation">;</span>y1 <span class="token operator">=</span> <span class="token function">sim</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span>input_train<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span>获取运行后时间t2 <span class="token operator">=</span> clock<span class="token punctuation">;</span><span class="token operator">%</span>测试y2 <span class="token operator">=</span> <span class="token function">sim</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span>input_test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">size</span><span class="token punctuation">(</span>y2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token function">y2_fore</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">y2</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">out_fore</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token function">output_test</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span class="token operator">%</span>画出预测语音种类和实际语音种类的分类图<span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>y2_fore<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>hold on<span class="token function">plot</span><span class="token punctuation">(</span>out_fore<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'预测语音类别'</span><span class="token punctuation">,</span><span class="token string">'实际语音类别'</span><span class="token punctuation">)</span>error <span class="token operator">=</span> y2_fore <span class="token operator">-</span> out_fore<span class="token punctuation">;</span><span class="token operator">%</span>画出误差图<span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'BP网络分类误差'</span><span class="token punctuation">,</span><span class="token string">'fontsize'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'语音信号'</span><span class="token punctuation">,</span><span class="token string">'fontsize'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'分类误差'</span><span class="token punctuation">,</span><span class="token string">'fontsize'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">%</span>计算训练时间t <span class="token operator">=</span> <span class="token function">etime</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span>总正确率total_accu <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>y2_fore<span class="token operator">==</span>out_fore<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">length</span><span class="token punctuation">(</span>out_fore<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>1)使用其中1500组为训练数据，500组为测试数据，输入层神经元24，隐含层神经元数目为30，输出层神经元数目为4的分类效果如图2所示。  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/0ab58ddd-1791-4f06-9e47-22a4299a1d4e.jpg" alt="图2 分类效果图"><br>误差如图3所示。<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/ff5df719-6174-4c5b-8c46-1aeae068dece.png" alt="图3 分类误差"></p><p>2)使用不同的隐含层神经元个数对分类精度的影响如表1所示。  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/d6f68726-3963-4018-96c5-3728530507f9.png" alt="表1"><br>由表1可看出，总体正确率随着神经元数目的减少，略微呈下降趋势，但差别不大。  </p><p>3)四种不同训练算法性能如表2所示。  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/df183a1e-b288-4f29-8114-8b2c40bd0bcf.png" alt="表2"><br>由表2可知，trainlm算法性能最好，但所需时间较多。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BP 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析递归调用</title>
      <link href="/2019/10/20/%E6%B5%85%E6%9E%90%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8/"/>
      <url>/2019/10/20/%E6%B5%85%E6%9E%90%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="递归调用算法"><a href="#递归调用算法" class="headerlink" title="递归调用算法"></a>递归调用算法</h2><p>递归调用算法指的是一函数不断调用自身的算法。需要说明的是：递归算法并非一碰到return就结束调用，而是由被调函数一层层返回主函数。  </p><h3 id="递归函数体"><a href="#递归函数体" class="headerlink" title="递归函数体"></a>递归函数体</h3><p>递归函数体包含两部分：</p><p>1.递归头（说明递归结束的条件）</p><p>2.递归体（使用递归需要执行的操作，如：改变入参）</p><h3 id="递归算法实例"><a href="#递归算法实例" class="headerlink" title="递归算法实例"></a>递归算法实例</h3><p>问题：求给定整数的下一个质数,如果自身是质数，则返回自身  </p><p>例：  </p><p>INPUT:7   OUTPUT:7  </p><p>INPUT:8   OUTPUT:11</p><p>算法代码（java）  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test002</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*需要特别注意这里加了return,这里也是递归体*/</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> x<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数值： "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test002 newtest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">test002</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newtest<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面find递归函数里，有包含两个return，第一个return返回递归体，第二个return返回参数x的值。  </p><p>若第一个不加return，则函数到了结束条件时，会一层层地向上返回，直到返回到原来的主调函数。  </p><p>e.g. 输入为8，期望输出为11。<br>1.若第一个不加return，则x的值变为11后，先执行”return x;” ，然后find函数会一层层地返回到原来的主调函数，即find(9).<br>2.若第一个加了return，则x的值变为11后，先执行”return x;” ，然后直接执行”return find(++x)”语句，直接返回当前x的值，而不再返回之前的递归。  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何解决git发布到远端重复输入用户名和密码</title>
      <link href="/2019/10/13/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3git%E5%8F%91%E5%B8%83%E5%88%B0%E8%BF%9C%E7%AB%AF%E9%87%8D%E5%A4%8D%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81/"/>
      <url>/2019/10/13/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3git%E5%8F%91%E5%B8%83%E5%88%B0%E8%BF%9C%E7%AB%AF%E9%87%8D%E5%A4%8D%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为本人在使用hexo博客发布到远端过程中，出现重复输入用户名和密码问题，觉得太麻烦，于是上网查找解决办法。但发现没有一个比较完整的解决思路，于是将本人解决经验总结如下.  </p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><pre class="line-numbers language-bash"><code class="language-bash">    1.生成SSH密钥    2.设置Github项目的Deploy keys    3.修改hexo根目录下的_config.yml文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="具体解决步骤（配图说明）"><a href="#具体解决步骤（配图说明）" class="headerlink" title="具体解决步骤（配图说明）"></a>具体解决步骤（配图说明）</h2><h3 id="1-生成SSH密钥"><a href="#1-生成SSH密钥" class="headerlink" title="1.生成SSH密钥"></a>1.生成SSH密钥</h3><p>1.一般可通过在桌面单击鼠标右键选择“Git Bash Here”来打开Git的命令行窗口，打开后的窗口如图1所示:  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/17e77ff8-a6a3-4ac7-ad82-901de307eb4b.jpg" alt="图1"></p><p>2.在上图所示窗口中输入如下命令：  </p><blockquote><p>$ cd ~/.ssh<br>$ ssh-keygen -t rsa -C “username”</p></blockquote><pre><code>注意：1).第一行命令是查看你的PC用户根目录下是否有.ssh文件夹；2).上述命令中的"username"指的是你git的用户名。</code></pre><p>3.输入上述命令后，为简化流程，以后三次提示输入直接按Enter即可。然后可看到：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/1c358f17-10e5-4dc1-8a5d-05cf2a0fed1c.jpg" alt="图2"></p><p>说明密钥生成成功。</p><h3 id="2-设置Github项目的Deploy-keys"><a href="#2-设置Github项目的Deploy-keys" class="headerlink" title="2.设置Github项目的Deploy keys"></a>2.设置Github项目的Deploy keys</h3><p>此处以我的博客为例。</p><p>1.找到hlgao666.github.io仓库中，依次点击 Settings –&gt; Deploy keys –&gt; Add deploy key。  </p><p>2.找到PC用户根目录下的.ssh文件夹，将id_rsa.pub 中的内容全选复制到 key 输入框中，勾选 Allow write access，然后点击 Add key 完成添加公钥。  </p><p>3.测试配置是否成功。</p><p>在Git命令行窗口中输入以下命令：</p><blockquote><p>$ ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p></blockquote><p>如果出现以下内容即表示配置完成并且成功！</p><pre class="line-numbers language-bash"><code class="language-bash">Hi username<span class="token operator">!</span> You've successfully authenticated, but GitHub does notprovide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-修改hexo根目录下的-config-yml文件"><a href="#3-修改hexo根目录下的-config-yml文件" class="headerlink" title="3.修改hexo根目录下的_config.yml文件"></a>3.修改hexo根目录下的_config.yml文件</h3><p>修改 hexo 的配置文件 _config.yml 中的deploy 属性。</p><p>修改如下：</p><blockquote><pre><code>deploy:  type: git  repo: git@github.com:hlgao666/hlgao666.github.io.git  branch: master</code></pre></blockquote><p>至此，修改已全部完成。重新hexo clean, hexo g -d即可。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1]<a href="https://blog.csdn.net/hhgggggg/article/details/77853665" target="_blank" rel="noopener">https://blog.csdn.net/hhgggggg/article/details/77853665</a><br>[2]<a href="https://blog.csdn.net/yjk13703623757/article/details/87882294" target="_blank" rel="noopener">https://blog.csdn.net/yjk13703623757/article/details/87882294</a>  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求解最短路问题的两种经典算法（下）</title>
      <link href="/2019/10/11/%E6%B1%82%E8%A7%A3%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B8%8B/"/>
      <url>/2019/10/11/%E6%B1%82%E8%A7%A3%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Floyd-algorithm"><a href="#Floyd-algorithm" class="headerlink" title="Floyd algorithm"></a>Floyd algorithm</h2><blockquote><p>Floyd算法又称为插点法，是一种利用动态规划的思想寻找给定的加权图中多源点之间最短路径的算法，与Dijkstra算法类似。  </p></blockquote><p>求解多源最短路问题的2种方法：</p><p>1.直接把Dijkstra调用|V|遍，时间复杂度为O(V^3);</p><p>2.Floyd算法更简洁，但算法复杂度仍为O(V^3)。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><pre class="line-numbers language-bash"><code class="language-bash">遍历每个结点对，对每个结点对做松弛操作。结点对的松弛操作在图论里会经常用到，松弛操作用来求一个结点对之间的最短路径。假设图中有n个点，对图中结点对的松弛操作的思路为（以结点对1和n为例）：  1.建图，用一个二维数组edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>来表示i到j之间的距离。遍历每个结点对，松弛操作中edge数组表示两个点之间当前的最短距离。  2.允许经过前一个点，即2，进行中转，判断edge<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>和edge<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span>+edge<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>之间的大小。若edge<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span>+edge<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>更小，则表示通过点2中转的话1到n的距离比不中转更短。此时更新edge<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>的值为edge<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span>+edge<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>。由于edge数组表示两个点之间当前的最短距离，则这时经过点2中转的结果已经隐含体现在了edge<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>中，之后的松弛操作都是在这一基础上进行。  3.重复2过程，允许经过前3~n-1个结点进行中转，保存每一次中转与否最短路径的变化。最后得到的edge<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>就是1到n的最短路径的路径和。  4.对图中的每一个结点对都进行松弛操作，此时edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>，就是从i到j的最短路径，不管i和j是几，都能得到答案。  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法图解"><a href="#算法图解" class="headerlink" title="算法图解"></a>算法图解</h3><p>暑假，小万准备去一些城市旅游。有些城市之间有公路，有些城市之间则没有，如下图7。为了节省经费以及方便计划旅程，小万希望在出发之前知道任意两个城市之前的最短路程。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/49e12656-c81c-43d0-93d2-bd3cd612dcbc.jpg" alt="图7"></p><p>上图中有4个城市8条公路，公路上的数字表示这条公路的长短。请注意这些公路是单向的。我们现在需要求任意两个城市之间的最短路程，也就是求任意两个点之间的最短路径。这个问题这也被称为“多源最短路径”问题。  </p><p>现在需要一个数据结构来存储图的信息，我们仍然可以用一个4x4的矩阵（二维数组e）来存储。比如1号城市到2号城市的路程为2，则设e[1][2]的值为2。2号城市无法到达4号城市，则设置e[2][4]的值为∞。另外此处约定一个城市自己是到自己的也是0，例如e[1][1]为0，具体如下图2所示。  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/927fddc6-5439-47a1-b43a-9bec2dd49c86.jpg" alt="图8">  </p><p>现在回到问题：如何求任意两点之间最短路径呢？通过之前的学习我们知道通过深度或广度优先搜索可以求出两点之间的最短路径。所以进行n2遍深度或广度优先搜索，即对每两个点都进行一次深度或广度优先搜索，便可以求得任意两点之间的最短路径。可是还有没有别的方法呢？  </p><p>我们来想一想，根据我们以往的经验，如果要让任意两点（例如从顶点a点到顶点b）之间的路程变短，只能引入第三个点（顶点k），并通过这个顶点k中转即a-&gt;k-&gt;b，才可能缩短原来从顶点a点到顶点b的路程。那么这个中转的顶点k是1~n中的哪个点呢？甚至有时候不只通过一个点，而是经过两个点或者更多点中转会更短，即a-&gt;k1-&gt;k2b-&gt;或者a-&gt;k1-&gt;k2…-&gt;k-&gt;i…-&gt;b。比如上图中从4号城市到3号城市（4-&gt;3）的路程e[4][3]原本是12。如果只通过1号城市中转（4-&gt;1-&gt;3），路程将缩短为11（e[4][1]+e[1][3]=5+6=11）。其实1号城市到3号城市也可以通过2号城市中转，使得1号到3号城市的路程缩短为5（e[1][2]+e[2][3]=2+3=5）。所以如果同时经过1号和2号两个城市中转的话，从4号城市到3号城市的路程会进一步缩短为10。通过这个的例子，我们发现每个顶点都有可能使得另外两个顶点之间的路程变短。好，下面我们将这个问题一般化。  </p><p>当任意两点之间不允许经过第三个点时，这些城市之间最短路程就是初始路程，如下图9所示。  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/927fddc6-5439-47a1-b43a-9bec2dd49c86.jpg" alt="图9">  </p><p>假如现在只允许经过1号顶点，求任意两点之间的最短路程，应该如何求呢？只需判断e[i][1]+e[1][j]是否比e[i][j]要小即可。e[i][j]表示的是从i号顶点到j号顶点之间的路程。e[i][1]+e[1][j]表示的是从i号顶点先到1号顶点，再从1号顶点到j号顶点的路程之和。其中i是1<del>n循环，j也是1</del>n循环，代码实现如下。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在只允许经过1号顶点的情况下，任意两点之间的最短路程更新为：  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/9c8dc26d-feff-4e43-8292-3cf1d58a6f71.jpg" alt="图10">  </p><p>通过上图我们发现：在只通过1号顶点中转的情况下，3号顶点到2号顶点（e[3][2]）、4号顶点到2号顶点（e[4][2]）以及4号顶点到3号顶点（e[4][3]）的路程都变短了。  </p><p>接下来继续求在只允许经过1和2号两个顶点的情况下任意两点之间的最短路程。如何做呢？我们需要在只允许经过1号顶点时任意两点的最短路程的结果下，再判断如果经过2号顶点是否可以使得i号顶点到j号顶点之间的路程变得更短。即判断e[i][2]+e[2][j]是否比e[i][j]要小，代码实现为如下。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//经过1号顶点</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>              e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//经过2号顶点</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>              e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在只允许经过1和2号顶点的情况下，任意两点之间的最短路程更新为：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/d3f372c5-85bc-4b79-aeb4-ad81cf156bcc.jpg" alt="图11">  </p><p>通过上图得知，在相比只允许通过1号顶点进行中转的情况下，这里允许通过1和2号顶点进行中转，使得e[1][3]和e[4][3]的路程变得更短了。</p><p>同理，继续在只允许经过1、2和3号顶点进行中转的情况下，求任意两点之间的最短路程。任意两点之间的最短路程更新为：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/da2ab4d4-bafc-429f-99ab-f1a2be79c0b9.jpg" alt="图12"> </p><p>最后允许通过所有顶点作为中转，任意两点之间最终的最短路程为：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/6dd89727-5875-4dc9-85f8-fe6547af4440.jpg" alt="图13"> </p><h3 id="代码实现-C"><a href="#代码实现-C" class="headerlink" title="代码实现(C++)"></a>代码实现(C++)</h3><pre class="line-numbers language-java"><code class="language-java">#include<span class="token operator">&lt;</span>iostream<span class="token operator">></span>#define inf <span class="token number">999999</span>  <span class="token comment" spellcheck="true">//表示两个点之间不连通 </span>#define max <span class="token number">105</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>edge<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先对邻接矩阵进行初始化 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>        edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//建图 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>i<span class="token operator">>></span>j<span class="token punctuation">;</span>        cin<span class="token operator">>></span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//若结点对跟中转点不连通，则跳过 </span>                <span class="token keyword">if</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">!=</span>inf <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>inf <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>edge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//更新最短路径 </span>                    edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>edge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1]<a href="https://www.cnblogs.com/wangyuliang/p/9216365.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangyuliang/p/9216365.html</a><br>[2]<a href="https://blog.csdn.net/Q_M_X_D_D_/article/details/84866501" target="_blank" rel="noopener">https://blog.csdn.net/Q_M_X_D_D_/article/details/84866501</a><br>[3]<a href="https://www.jianshu.com/p/ff6db00ad866" target="_blank" rel="noopener">https://www.jianshu.com/p/ff6db00ad866</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dijkstra &amp; Floyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求解最短路问题的两种经典算法（上）</title>
      <link href="/2019/10/10/%E6%B1%82%E8%A7%A3%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B8%8A/"/>
      <url>/2019/10/10/%E6%B1%82%E8%A7%A3%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Dijkstra-amp-Floyd-Algorithm"><a href="#Dijkstra-amp-Floyd-Algorithm" class="headerlink" title="Dijkstra &amp; Floyd Algorithm"></a>Dijkstra &amp; Floyd Algorithm</h1><p>Dijkstra算法用于解决有权图的单源最短路问题，Floyd算法用于解决有权图的多源最短路问题。但二者均无法解决带负值问题，否则会陷入“负值圈”。  </p><h2 id="Dijkstra-algorithm"><a href="#Dijkstra-algorithm" class="headerlink" title="Dijkstra algorithm"></a>Dijkstra algorithm</h2><blockquote><p>迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个节点到其他节点的最短路径。它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。  </p></blockquote><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/47185815-e2b7-4eca-8be6-dca8fd7e218a.jpg" alt="图1"></p><p>指定A作为“源点”，问题就是求A到其他节点的最短路径。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><pre class="line-numbers language-bash"><code class="language-bash">1.指定一个节点，例如我们要计算 <span class="token string">'A'</span> 到其他节点的最短路径  2.引入两个集合（S、U），S集合包含已求出的最短路径的点（以及相应的最短长度），U集合包含未求出最短路径的点（以及A到该点的路径，注意:如上图1所示，A-<span class="token operator">></span>C由于没有直接边相连，初始时置为∞）  3.初始化两个集合，S集合初始时 只有当前要计算的节点，A-<span class="token operator">></span>A <span class="token operator">=</span> 0，U集合初始时为 A-<span class="token operator">></span>B <span class="token operator">=</span> 4, A-<span class="token operator">></span>C <span class="token operator">=</span> ∞, A-<span class="token operator">></span>D <span class="token operator">=</span> 2, A-<span class="token operator">></span>E <span class="token operator">=</span> ∞  4.从U集合中找出路径最短的点，加入S集合，例如 A-<span class="token operator">></span>D <span class="token operator">=</span> 2  5.更新U集合路径，if <span class="token punctuation">(</span> <span class="token string">'D 到 B,C,E 的距离'</span> + <span class="token string">'AD 距离'</span> <span class="token operator">&lt;</span> <span class="token string">'A 到 B,C,E 的距离'</span> <span class="token punctuation">)</span> 则更新U  6.循环执行 4、5 两步骤，直至遍历结束，得到A到其他节点的最短路径.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法图解"><a href="#算法图解" class="headerlink" title="算法图解"></a>算法图解</h3><p>1.选定A节点并初始化，如上述步骤3所示</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/5e2a965e-1019-4924-b42c-6c0a89d1ba20.jpg" alt="图2"></p><p>2.执行上述 4、5两步骤，找出U集合中路径最短的节点D 加入S集合，并根据条件 if ( ‘D 到 B,C,E 的距离’ + ‘AD 距离’ &lt; ‘A 到 B,C,E 的距离’ ) 来更新U集合  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/748c75a6-ac05-4495-8668-5c15e1a15124.jpg" alt="图3"></p><p>3.这时候 A-&gt;B, A-&gt;C 都为3，没关系。其实这时候他俩都是最短距离，如果从算法逻辑来讲的话，会先取到B点。而这个时候 if 条件变成了 if ( ‘B 到 C,E 的距离’ + ‘AB 距离’ &lt; ‘A 到 C,E 的距离’ ) ，如图所示这时候A-&gt;B距离 其实为 A-&gt;D-&gt;B  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/afc8fce8-3d7b-4154-9d99-a28b341a07ec.jpg" alt="图4"></p><p>4.思路就是这样，往后就是大同小异了</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/c5cb1f46-9e65-4808-9119-1b47dd729735.jpg" alt="图5"></p><p>5.算法结束</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/31e27fca-601b-4ee6-a7c3-e1cb7f33cb2b.jpg" alt="图6"></p><h3 id="代码实现-java"><a href="#代码实现-java" class="headerlink" title="代码实现(java)"></a>代码实现(java)</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dijkstra</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表正无穷</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 二维数组每一行分别是 A、B、C、D、E 各点到其余点的距离, </span>        <span class="token comment" spellcheck="true">// A -> A 距离为0, 常量M 为正无穷</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weight1 <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>M<span class="token punctuation">}</span><span class="token punctuation">,</span>                 <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>M<span class="token punctuation">}</span><span class="token punctuation">,</span>                 <span class="token punctuation">{</span>M<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                 <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                   <span class="token punctuation">{</span>M<span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> shortPath <span class="token operator">=</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>weight1<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> shortPath<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从"</span> <span class="token operator">+</span> start <span class="token operator">+</span> <span class="token string">"出发到"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"的最短距离为："</span> <span class="token operator">+</span> shortPath<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weight<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 接受一个有向图的权重矩阵，和一个起点编号start（从0编号，顶点存在数组中）</span>        <span class="token comment" spellcheck="true">// 返回一个int[] 数组，表示从start到它的最短路径长度</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> weight<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 顶点个数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> shortPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存start到其他各点的最短路径</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存start到其他各点最短路径的字符串表示</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token string">"-->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记当前该顶点的最短路径是否已经求出,1表示已求出</span>        <span class="token comment" spellcheck="true">// 初始化，第一个顶点已经求出</span>        shortPath<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 要加入n-1个顶点</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选出一个距离初始顶点start最近的未标记顶点</span>            <span class="token keyword">int</span> dmin <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> weight<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dmin<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dmin <span class="token operator">=</span> weight<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    k <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将新选出的顶点标记为已求出最短路径，且到start的最短路径就是dmin</span>            shortPath<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dmin<span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 以k为中间点，修正从start到未访问各点的距离</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果 '起始点到当前点距离' + '当前点到某点距离' &lt; '起始点到某点距离', 则更新</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> weight<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> weight<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    weight<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"-->"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从"</span> <span class="token operator">+</span> start <span class="token operator">+</span> <span class="token string">"出发到"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"的最短路径为："</span> <span class="token operator">+</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> shortPath<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1]<a href="https://blog.csdn.net/Q_M_X_D_D_/article/details/84866501" target="_blank" rel="noopener">https://blog.csdn.net/Q_M_X_D_D_/article/details/84866501</a><br>[2]<a href="https://www.jianshu.com/p/ff6db00ad866" target="_blank" rel="noopener">https://www.jianshu.com/p/ff6db00ad866</a><br>[3]<a href="https://www.cnblogs.com/wangyuliang/p/9216365.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangyuliang/p/9216365.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dijkstra &amp; Floyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树的两种经典算法</title>
      <link href="/2019/10/09/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"/>
      <url>/2019/10/09/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Prim-amp-Kruskal-Algorithm"><a href="#Prim-amp-Kruskal-Algorithm" class="headerlink" title="Prim &amp; Kruskal Algorithm"></a>Prim &amp; Kruskal Algorithm</h2><p>转自：<a href="https://blog.csdn.net/qq_36951116/article/details/83089039" target="_blank" rel="noopener">https://blog.csdn.net/qq_36951116/article/details/83089039</a></p><p>问题引出：假设要在n个城市之间建立通信网，则连通n个城市只需要n-1条线路。这时自然会考虑一个问题：如何在最节省经费的前提下建立这个通信网？  </p><hr><h3 id="MST-minimal-spanning-treeproblem"><a href="#MST-minimal-spanning-treeproblem" class="headerlink" title="MST(minimal spanning treeproblem)"></a>MST(minimal spanning treeproblem)</h3><p>可以用连通网来表示n个城市以及n个城市之间的通信线路，其中，网的顶点表示城市，边表示两城市之间的线路，赋予边权值表示开设相应线路的代价。  </p><p>这个问题就是最小生成树问题：求解连通无向图的权最小的生成树  </p><p>Prim &amp; Kruskal Algorithm 是利用MST性质构造最小生成树的两种算法。Prim算法用于稠密图效果更好，Kruskal算法则更适用于稀疏图。  </p><h3 id="MST性质"><a href="#MST性质" class="headerlink" title="MST性质"></a>MST性质</h3><p>设G=(V，E)是一个连通网络，U是顶点集V的一个真子集。若(u，v)是G中一条“一个端点在U中(例如：u∈U)，另一个端点不在U中”的边(例如：v∈V-U)，且(u，v)具有最小权值，则一定存在G的一棵最小生成树包括此边(u，v)。  </p><p>证明略去，具体可参考： <a href="https://blog.csdn.net/s_j_huang/article/details/79447041" target="_blank" rel="noopener">https://blog.csdn.net/s_j_huang/article/details/79447041</a></p><h3 id="Prim-algorithm"><a href="#Prim-algorithm" class="headerlink" title="Prim algorithm"></a>Prim algorithm</h3><pre class="line-numbers language-bash"><code class="language-bash">算法思路：从已选顶点所关联的未选边中找出权重最小的边，并且生成树不存在环。  其中，已选顶点是构成最小生成树的结点，未选边是不属于生成树中的边。 （普里姆算法与求最短路径的迪杰斯塔拉算法思想很类似）  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们对下面这幅图求其最小生成树：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/cce0d70f-b6e6-48ea-9519-f189f121f484.jpg" alt="图1"></p><p>假设我们从顶点v1开始，所以我们可以发现（v1,v3）边的权重最小，所以第一个输出的边就是：v1—v3=1,  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/54ff1e34-d5f4-4860-bc50-1cdf8d913f97.jpg" alt="图2"></p><p>然后，我们要从v1和v3作为起点的边中寻找权重最小的边，首先了（v1,v3）已经访问过了，所以我们从其他边中寻找，发现(v3,v6)这条边最小，所以输出边就是：v3—-v6=4,  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/b65519e4-5255-497d-881d-8f63ad5b8d0c.jpg" alt="图3"></p><p>然后，我们要从v1、v3、v6这三个点相关联的边中寻找一条权重最小的边，我们可以发现边(v6,v4)权重最小，所以输出边就是：v6—-v4=2,  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/b4d94cf0-c0d2-43b8-a14f-72d1abfc4c06.jpg" alt="图4"></p><p>然后，我们就从v1、v3、v6、v4这四个顶点相关联的边中寻找权重最小的边，发现边（v3，v2）的权重最小，所以输出边：v3—–v2=5,  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/a83403b5-385b-4a9e-8287-f1c2057cf2e7.jpg" alt="图5"></p><p>然后，我们就从v1、v3、v6、v4，v2这2五个顶点相关联的边中寻找权重最小的边，发现边（v2，v5）的权重最小，所以输出边：v2—–v5=3,  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/131b3eac-2fb7-4919-8771-687f1b541a1d.jpg" alt="图6"></p><p>最后，我们发现六个点都已经加入到集合U了，我们的最小生成树建立完成。  </p><h3 id="Kruskal-algorithm"><a href="#Kruskal-algorithm" class="headerlink" title="Kruskal algorithm"></a>Kruskal algorithm</h3><pre class="line-numbers language-bash"><code class="language-bash">算法思路： （1）将边按权值从小到大的顺序添加到新图中，保证添加的过程中不会形成环 （2）重复上一步直到连接所有顶点，此时就生成了最小生成树。这是一种贪心策略。将图中所有边按照权重的大小 从小到大一个一个按顺序组合成最小生成树，在组合过程新加入的边会导致生成树形成环，那这条边就舍弃，直到所有顶点都添加到生成树中为止。  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里同样我们给出一个和Prim算法讲解中同样的例子，模拟克鲁斯卡算法生成最小生成树的详细的过程：  </p><p>首先完整的图如下图： </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/cce0d70f-b6e6-48ea-9519-f189f121f484.jpg" alt="图7"></p><p>然后，我们需要从这些边中找出权重最小的那条边，可以发现边（v1，v3）这条边的权重是最小的，所以我们输出边：v1—-v3=1,  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/54ff1e34-d5f4-4860-bc50-1cdf8d913f97.jpg" alt="图8"></p><p>然后，我们需要在剩余的边中，再次寻找一条权重最小的边，可以发现边（v4，v6）这条边的权重最小，所以输出边：v4—v6=2,    </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/4f07981b-1285-49a0-ba30-b6b9cd775fad.jpg" alt="图9"></p><p>然后，我们再次从剩余边中寻找权重最小的边，发现边（v2，v5）的权重最小，所以可以输出边：v2—-v5=3,  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/bfc80ffe-c299-4f47-898c-dca80d97f07e.jpg" alt="图10"></p><p>然后，我们使用同样的方式找出了权重最小的边：（v3，v6），所以我们输出边：v3—-v6=4,  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/b570503b-57f7-4b0a-b119-1f35417e15ed.jpg" alt="图11"></p><p>好了，现在我们还需要找出最后一条边就可以构造出一颗最小生成树，但是这个时候我们有三个选择：（v1,V4），（v2，v3），（v3，v4）,这三条边的权重都是5，首先我们如果选（v1，v4）的话，得到的图如下:  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/1294de6d-559d-4f61-900b-ce9bf28b3cff.jpg" alt="图12"></p><p>我们发现，这肯定是不符合我们算法要求的，因为它出现了一个环，所以我们再使用第二个（v2，v3）试试，得到图形如下：  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/0dc0287d-70f7-4c2d-a85a-7c06b72fbebd.jpg" alt="图13"></p><p>我们发现，这个图中没有环出现，而且把所有的顶点都加入到了这颗树上了，所以（v2，v3）就是我们所需要的边，所以最后一个输出的边就是：v2—-v3=5.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prim &amp; Kruskal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A-Star Algorithm</title>
      <link href="/2019/09/27/A-Star-Algorithm/"/>
      <url>/2019/09/27/A-Star-Algorithm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="A-Star-Algorithm"><a href="#A-Star-Algorithm" class="headerlink" title="A-Star Algorithm"></a>A-Star Algorithm</h2><p>转自：<a href="https://blog.csdn.net/qq_36946274/article/details/81982691" target="_blank" rel="noopener">https://blog.csdn.net/qq_36946274/article/details/81982691</a></p><h3 id="1-搜索区域-The-Search-Area"><a href="#1-搜索区域-The-Search-Area" class="headerlink" title="1.搜索区域(The Search Area)"></a>1.搜索区域(The Search Area)</h3><pre class="line-numbers language-bash"><code class="language-bash">A*算法是一种在静态路网中求解最短路径问题的最直接方法，问题可描述如下：  我们假设某人要从 A 点移动到 B 点，但是这两点之间被一堵墙隔开。如图 1 ，绿色是 A ，红色是 B ，中间蓝色是墙。    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/3ffed8b8-ba3d-4447-b960-f64ab86d1035.jpg" alt="图1"></p><p>你应该注意到了，我们把要搜寻的区域划分成了正方形的格子。这是寻路的第一步，简化搜索区域，就像我们这里做的一样。这个特殊的方法把我们的搜索区域简化为了 2 维数组。数组的每一项代表一个格子，它的状态就是可走 (walkalbe) 和不可走 (unwalkable) 。通过计算出从 A 到 B需要走过哪些方格，就找到了路径。一旦路径找到了，人物便从一个方格的中心移动到另一个方格的中心，直至到达目的地。  </p><p>方格的中心点我们成为“节点 (nodes) ”。如果你读过其他关于 A-Star寻路算法的文章，你会发现人们常常都在讨论节点。为什么不直接描述为方格呢？因为我们有可能把搜索区域划为为其他多变形而不是正方形，例如可以是六边形，矩形，甚至可以是任意多变形。而节点可以放在任意多边形里面，可以放在多变形的中心，也可以放在多边形的边上。我们使用这个系统，因为它最简单。</p><h3 id="2-开始搜索-Starting-the-Search"><a href="#2-开始搜索-Starting-the-Search" class="headerlink" title="2.开始搜索(Starting the Search)"></a>2.开始搜索(Starting the Search)</h3><p>一旦我们把搜寻区域简化为一组可以量化的节点后，就像上面做的一样，我们下一步要做的便是查找最短路径。在 A* 中，我们从起点开始，检查其相邻的方格，然后向四周扩展，直至找到目标。  </p><pre class="line-numbers language-bash"><code class="language-bash">我们这样开始我们的寻路旅途：1.从起点 A 开始，并把它就加入到一个由方格组成的 <span class="token function">open</span> list<span class="token punctuation">(</span> 开放列表 <span class="token punctuation">)</span> 中。这个 <span class="token function">open</span> list 有点像是一个购物单。当然现在 <span class="token function">open</span> list 里只有一项，它就是起点 A ，后面会慢慢加入更多的项。 Open list 里的格子是路径可能会是沿途经过的，也有可能不经过。基本上 <span class="token function">open</span> list 是一个待检查的方格列表。  2.查看与起点 A 相邻的方格 <span class="token punctuation">(</span> 忽略其中墙壁所占领的方格，河流所占领的方格及其他非法地形占领的方格 <span class="token punctuation">)</span> ，把其中可走的 <span class="token punctuation">(</span>walkable<span class="token punctuation">)</span> 或可到达的 <span class="token punctuation">(</span>reachable<span class="token punctuation">)</span> 方格也加入到 <span class="token function">open</span> list 中。把起点 A 设置为这些方格的父亲 <span class="token punctuation">(</span>parent node 或 parent square<span class="token punctuation">)</span> 。当我们在追踪路径时，这些父节点的内容是很重要的。稍后解释。  3.把 A 从 <span class="token function">open</span> list 中移除，加入到 close list<span class="token punctuation">(</span> 封闭列表 <span class="token punctuation">)</span> 中， close list 中的每个方格都是现在不需要再关注的。    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图2所示，深绿色的方格为起点，它的外框是亮蓝色，表示该方格被加入到了 close list 。与它相邻的黑色方格是需要被检查的，他们的外框是亮绿色。每个黑方格都有一个灰色的指针指向他们的父节点，这里是起点 A 。<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/502f4ee9-d674-41b1-afa8-0b972bffe745.jpg" alt="图2"></p><p>下一步，我们需要从 open list 中选一个与起点 A 相邻的方格，按下面描述的一样或多或少的重复前面的步骤。但是到底选择哪个方格好呢？具有最小 F 值的那个。  </p><h3 id="3-路径排序-Path-Sorting"><a href="#3-路径排序-Path-Sorting" class="headerlink" title="3.路径排序(Path Sorting)"></a>3.路径排序(Path Sorting)</h3><p>计算出组成路径的方格的关键是下面这个等式：</p><center><font faceface="微软雅黑" color="red" size="10">F = G + H</font></center><pre class="line-numbers language-bash"><code class="language-bash">这里，G <span class="token operator">=</span> 从起点 A 移动到指定方格的移动代价，沿着到达该方格而生成的路径。    H <span class="token operator">=</span> 从指定的方格移动到终点 B 的估算成本。这个通常被称为试探法，有点让人混淆。为什么这么叫呢，因为这是个猜测。直到我们找到了路径我们才会知道真正的距离，因为途中有各种各样的东西 <span class="token punctuation">(</span> 比如墙壁，水等 <span class="token punctuation">)</span> 。本教程将教你一种计算 H 的方法，你也可以在网上找到其他方法。  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们的路径是这么产生的：反复遍历 open list ，选择 F 值最小的方格。这个过程稍后详细描述。我们还是先看看怎么去计算上面的等式。  </p><pre class="line-numbers language-bash"><code class="language-bash">如上所述， G 是从起点Ａ移动到指定方格的移动代价。在本例中，横向和纵向的移动代价为 10 ，对角线的移动代价为 14 。之所以使用这些数据，是因为实际的对角移动距离是 2 的平方根，或者是近似的 1.414 倍的横向或纵向移动代价。使用 10 和 14 就是为了简单起见。比例是对的，我们避免了开放和小数的计算。这并不是我们没有这个能力或是不喜欢数学。使用这些数字也可以使计算机更快。稍后你便会发现，如果不使用这些技巧，寻路算法将很慢。  既然我们是沿着到达指定方格的路径来计算 G 值，那么计算出该方格的 G 值的方法就是找出其父亲的 G 值，然后按父亲是直线方向还是斜线方向加上 10 或 14 。随着我们离开起点而得到更多的方格，这个方法会变得更加明朗。  有很多方法可以估算 H 值。这里我们使用 Manhattan 方法，计算从当前方格横向或纵向移动到达目标所经过的方格数，忽略对角移动，然后把总数乘以 10 。之所以叫做 Manhattan 方法，是因为这很像统计从一个地点到另一个地点所穿过的街区数，而你不能斜向穿过街区。重要的是，计算 H 是，要忽略路径中的障碍物。这是对剩余距离的估算值，而不是实际值，因此才称为试探法。  把 G 和 H 相加便得到 F 。我们第一步的结果如下图所示。每个方格都标上了 F ， G ， H 的值，就像起点右边的方格那样，左上角是 F ，左下角是 G ，右下角是 H 。    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/c1de3c94-647c-462d-8457-d8344f429d66.jpg" alt="图3"></p><p>好，现在让我们看看其中的一些方格。在标有字母的方格， G = 10 。这是因为水平方向从起点到那里只有一个方格的距离。与起点直接相邻的上方，下方，左方的方格的 G 值都是 10 ，对角线的方格 G 值都是 14 。  </p><p>H 值通过估算起点于终点 ( 红色方格 ) 的 Manhattan 距离得到，仅作横向和纵向移动，并且忽略沿途的墙壁。使用这种方式，起点右边的方格到终点有 3 个方格的距离，因此 H = 30 。这个方格上方的方格到终点有 4 个方格的距离 ( 注意只计算横向和纵向距离 ) ，因此 H = 40 。对于其他的方格，你可以用同样的方法知道 H 值是如何得来的。  </p><p>每个方格的 F 值，再说一次，直接把 G 值和 H 值相加就可以了。  </p><h3 id="4-继续搜索-Continuing-the-Search"><a href="#4-继续搜索-Continuing-the-Search" class="headerlink" title="4.继续搜索(Continuing the Search)"></a>4.继续搜索(Continuing the Search)</h3><p>为了继续搜索，我们从 open list 中选择 F 值最小的 ( 方格 ) 节点，然后对所选择的方格作如下操作：  </p><pre class="line-numbers language-bash"><code class="language-bash">1.把它从 <span class="token function">open</span> list 里取出，放到 close list 中。  2.检查所有与它相邻的方格，忽略其中在 close list 中或是不可走 <span class="token punctuation">(</span>unwalkable<span class="token punctuation">)</span> 的方格 <span class="token punctuation">(</span> 比如墙，水，或是其他非法地形 <span class="token punctuation">)</span> ，如果方格不在open lsit 中，则把它们加入到 <span class="token function">open</span> list 中。  把我们选定的方格设置为这些新加入的方格的父亲。  1.如果某个相邻的方格已经在 <span class="token function">open</span> list 中，则检查这条路径是否更优，也就是说经由当前方格 <span class="token punctuation">(</span> 我们选中的方格 <span class="token punctuation">)</span> 到达那个方格是否具有更小的 G 值。如果没有，不做任何操作。  2.相反，如果 G 值更小，则把那个方格的父亲设为当前方格 <span class="token punctuation">(</span> 我们选中的方格 <span class="token punctuation">)</span> ，然后重新计算那个方格的 F 值和 G 值。如果你还是很混淆，请参考下图4。    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/7f25a5ef-8863-4d4a-83f0-b7e2c40fd7e5.jpg" alt="图4"></p><p>OK ，让我们看看它是怎么工作的。在我们最初的 9 个方格中，还有 8 个在 open list 中，起点被放入了 close list 中。在这些方格中，起点右边的格子的 F 值 40 最小，因此我们选择这个方格作为下一个要处理的方格。它的外框用蓝线打亮。  </p><p>首先，我们把它从 open list 移到 close list 中 ( 这就是为什么用蓝线打亮的原因了 ) 。然后我们检查与它相邻的方格。它右边的方格是墙壁，我们忽略。它左边的方格是起点，在 close list 中，我们也忽略。其他 4 个相邻的方格均在 open list 中，我们需要检查经由这个方格到达那里的路径是否更好，使用 G 值来判定。让我们看看上面的方格。它现在的 G 值为 14 。如果我们经由当前方格到达那里， G 值将会为 20(其中 10 为到达当前方格的 G 值，此外还要加上从当前方格纵向移动到上面方格的 G 值 10) 。显然 20 比 14 大，因此这不是最优的路径。如果你看图你就会明白。直接从起点沿对角线移动到那个方格比先横向移动再纵向移动要好。  </p><p>当把 4 个已经在 open list 中的相邻方格都检查后，没有发现经由当前方格的更好路径，因此我们不做任何改变。现在我们已经检查了当前方格的所有相邻的方格，并也对他们作了处理，是时候选择下一个待处理的方格了。  </p><p>因此再次遍历我们的 open list ，现在它只有 7 个方格了，我们需要选择 F 值最小的那个。有趣的是，这次有两个方格的 F 值都 54 ，选哪个呢？没什么关系。从速度上考虑，选择最后加入 open list 的方格更快。这导致了在寻路过程中，当靠近目标时，优先使用新找到的方格的偏好。但是这并不重要。 ( 对相同数据的不同对待，导致两中版本的 A* 找到等长的不同路径 ) 。  </p><p>我们选择起点右下方的方格，如下图5所示。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/745594c7-6dfe-4790-b065-e1cd6b70449a.jpg" alt="图5"></p><p>这次，当我们检查相邻的方格时，我们发现它右边的方格是墙，忽略之。上面的也一样。  </p><p>我们把墙下面的一格也忽略掉。为什么？因为如果不穿越墙角的话，你不能直接从当前方格移动到那个方格。你需要先往下走，然后再移动到那个方格，这样来绕过墙角。 ( 注意：穿越墙角的规则是可选的，依赖于你的节点是怎么放置的 )  </p><p>这样还剩下 5 个相邻的方格。当前方格下面的 2 个方格还没有加入 open list ，所以把它们加入，同时把当前方格设为他们的父亲。在剩下的3 个方格中，有 2 个已经在 close list 中 ( 一个是起点，一个是当前方格上面的方格，外框被加亮的 ) ，我们忽略它们。最后一个方格，也就是当前方格左边的方格，我们检查经由当前方格到达那里是否具有更小的 G 值。没有。因此我们准备从 open list 中选择下一个待处理的方格。  </p><p>不断重复这个过程，直到把终点也加入到了 open list 中，此时如下图6所示。  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/3617cd5d-1c22-4195-89b3-4d62e9a69b90.jpg" alt="图6"></p><p>注意，在起点下面 2 格的方格的父亲已经与前面不同了。之前它的 G 值是 28 并且指向它右上方的方格。现在它的 G 值为 20 ，并且指向它正上方的方格。这在寻路过程中的某处发生，使用新路径时 G 值经过检查并且变得更低，因此父节点被重新设置， G 和 F 值被重新计算。尽管这一变化在本例中并不重要，但是在很多场合中，这种变化会导致寻路结果的巨大变化。  </p><p>那么我们怎么样去确定实际路径呢？很简单，从终点开始，按着箭头向父节点移动，这样你就被带回到了起点，这就是你的路径。如下图所示。从起点 A 移动到终点 B 就是简单从路径上的一个方格的中心移动到另一个方格的中心，直至目标。就是这么简单！  </p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/7e552f89-94cc-4373-87d5-a1d389e12a2f.jpg" alt="图7"></p><h3 id="5-A-Star-Algorithm-Summary"><a href="#5-A-Star-Algorithm-Summary" class="headerlink" title="5.A-Star Algorithm Summary"></a>5.A-Star Algorithm Summary</h3><p>Ok ，现在你已经看完了整个的介绍，现在我们把所有步骤放在一起：  </p><pre class="line-numbers language-bash"><code class="language-bash">1.把起点加入 <span class="token function">open</span> list 。2.重复如下过程：    a<span class="token punctuation">)</span>遍历 <span class="token function">open</span> list ，查找 F 值最小的节点，把它作为当前要处理的节点。      b<span class="token punctuation">)</span>把这个节点移到 close list 。      c<span class="token punctuation">)</span>对当前方格的 8 个相邻方格的每一个方格:        ◆ 如果它是不可抵达的或者它在 close list 中，忽略它。否则，做如下操作。          ◆ 如果它不在 <span class="token function">open</span> list 中，把它加入 <span class="token function">open</span> list ，并且把当前方格设置为它的父亲，记录该方格的 F ， G 和 H 值。          ◆ 如果它已经在 <span class="token function">open</span> list 中，检查这条路径 <span class="token punctuation">(</span> 即经由当前方格到达它那里 <span class="token punctuation">)</span> 是否更好，用 G 值作参考。更小的 G 值表示这是更好的路径。如果是这样，把它的父亲设置为当前方格，并重新计算它的 G 和 F 值。如果你的 <span class="token function">open</span> list 是按 F 值排序的话，改变后你可能需要重新排序。      d<span class="token punctuation">)</span>停止，当你        ◆ 把终点加入到了 <span class="token function">open</span> list 中，此时路径已经找到了，或者          ◆ 查找终点失败，并且 <span class="token function">open</span> list 是空的，此时没有路径。  3.保存路径。从终点开始，每个方格沿着父节点移动直至起点，这就是你的路径。    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1]<a href="https://blog.csdn.net/qq_36946274/article/details/81982691" target="_blank" rel="noopener">https://blog.csdn.net/qq_36946274/article/details/81982691</a><br>[2]<a href="https://blog.csdn.net/denghecsdn/article/details/78778769" target="_blank" rel="noopener">https://blog.csdn.net/denghecsdn/article/details/78778769</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A-Star </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文写作技巧总结</title>
      <link href="/2019/09/27/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
      <url>/2019/09/27/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="论文写作技巧总结"><a href="#论文写作技巧总结" class="headerlink" title="论文写作技巧总结"></a>论文写作技巧总结</h1><h2 id="论文逻辑"><a href="#论文逻辑" class="headerlink" title="论文逻辑"></a>论文逻辑</h2><hr><h4 id="一、章节大逻辑"><a href="#一、章节大逻辑" class="headerlink" title="一、章节大逻辑"></a>一、章节大逻辑</h4><ul><li>引言、方法、实验、讨论、结论等不同章节是否相互呼应？</li><li>引言每句话是否为方法做铺垫？</li><li>实验结果是否足够论证论文核心创新、展现方法细节？</li></ul><h4 id="二、段落小逻辑"><a href="#二、段落小逻辑" class="headerlink" title="二、段落小逻辑"></a>二、段落小逻辑</h4><ul><li><p>每一段的核心句（中心句）最好放在第一句，而不是最后一句？</p></li><li><p>上一段表达的主要内容与下一段表达的主要内容不能有跳跃；</p></li><li><p>段落之间逻辑顺序可以是：</p><p>  A –&gt; B 的顺序结构</p><p>  A1  –&gt;  A2 的并列结构</p><p>  A –&gt; A1 的总分结构</p><p>  A1  –&gt; A 的分总结构</p></li></ul><h4 id="三、语句微逻辑"><a href="#三、语句微逻辑" class="headerlink" title="三、语句微逻辑"></a>三、语句微逻辑</h4><ul><li><p>两句话之间逻辑顺畅，很大程度上决定了论文的可行性；</p></li><li><p>一个最好的办法：下一句话能够继承上一句话的某一个词语。</p></li></ul><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><hr><h4 id="四要素——目的、方法、结果、结论"><a href="#四要素——目的、方法、结果、结论" class="headerlink" title="四要素——目的、方法、结果、结论"></a>四要素——目的、方法、结果、结论</h4><ul><li>论文研究主题和主要目的</li><li>简单描述论文用到的研究方法</li><li>总结研究的主要结果</li><li>陈述得出的研究结论</li></ul><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><hr><p>引言虽然只有1-2页，却是审稿人和编辑是否愿意接收论文的<strong>关键部分</strong>。</p><p>引言的<strong>作用</strong>：<br>介绍研究背景、缕清文章脉络、找到研究缺陷、认可论文创新。</p><p>引言的<strong>写法</strong>：起、承、转、合</p><p>起（<strong>开门见山、直切主题</strong>）：</p><ul><li>1-2句话说明研究内容及其重要性；</li><li>快速引出论文需要提到的内容，不要从开天辟地说起。</li></ul><p>承（逻辑清晰、客观评价）：</p><ul><li>用清晰的逻辑，通过2-3段话，总结相关的研究，每段第一句话最好能有一个简单的总结。</li><li>注意引用文献时效性以及期刊的相关性。</li></ul><p>转（阐述已有研究Gap、介绍本文研究工作）：</p><ul><li>1-2句话对目前相关研究进行总结，指出目前研究存在的缺陷或Gap</li><li>接下来一段话引出本文做了什么事情。</li></ul><p>合（明确论文创新、介绍论文框架）：</p><ul><li>分条列举论文创新点</li><li>这里不是讲述论文做了什么，而是论述与别人有什么不一样</li><li>一般是1个核心创新，1-2个次要创新</li><li>最后介绍论文框架（哪一部分干了什么）</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><hr><h4 id="结论要求"><a href="#结论要求" class="headerlink" title="结论要求"></a>结论要求</h4><p>结论应该准确、完整、明确、精炼。</p><p>措辞严谨，逻辑严密，文字具体，常像法律条文一样，按顺序1、2、3…列成条文，用语斩钉截铁，且<strong>不能有歧义</strong>。文字上<strong>不应夸大</strong>，对尚不能完全肯定的内容需要留有余地。</p><h4 id="结论书写顺序"><a href="#结论书写顺序" class="headerlink" title="结论书写顺序"></a>结论书写顺序</h4><ol><li><p>首先需回答引言中提到的问题；</p></li><li><p>本文研究结果说明了什么问题；</p></li><li><p>对前人有关的看法作了哪些修正、补充、发展、证实或否定。</p></li><li><p>本文研究的不足之处或遗留未解决的问题，以及对这些问题的可能关键点和方向。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 论文写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文写作技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL无法启动--Windows环境下如何解决Can&#39;t connect to MySQL server on localhost (10061)</title>
      <link href="/2019/09/24/MySQL%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8-Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3Can-t-connect-to-MySQL-server-on-localhost-10061/"/>
      <url>/2019/09/24/MySQL%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8-Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3Can-t-connect-to-MySQL-server-on-localhost-10061/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre class="line-numbers language-bash"><code class="language-bash">因为近期做项目需要用到mysql数据库，但用matlab连接数据库时报错：未定义与 <span class="token string">'struct'</span> 类型的输入参数相对应的函数 <span class="token string">'fetch'</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><pre class="line-numbers language-bash"><code class="language-bash">查找了网上此类问题的原因，大致如下：安装mysql后使用mysql命令时报错 <span class="token string">"Can't connect to MySQL server on localhost (10061)"</span>，或者用<span class="token string">"net start mysql"</span> 时报服务名无效，一般是因为mysql服务没有启动。   解决方案：    1.修改系统变量  2.重启MySQL     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改系统变量具体请参考：<a href="https://blog.csdn.net/wolfking0608/article/details/82784297/" target="_blank" rel="noopener">Solution</a></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><pre class="line-numbers language-bash"><code class="language-bash">然鹅，在试过上述修改环境变量后，依然报错，于是，开始怀疑是不是没有启动MySQL服务。打开cmd，在命令行输入<span class="token string">"mysql -u root -p"</span>，提示输入密码。输完密码后直接闪退。  于是换另一种方式重启服务，以下是具体步骤： 在桌面右键单击“我的电脑”--管理--服务和应用程序--服务，在服务名称中找到MySQL57（以MySQL57为例），右键单击将其重新启动即可。好了，大功告成，这次终于成功了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法介绍</title>
      <link href="/2019/09/04/Markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/09/04/Markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Markdown一些常用命令"><a href="#Markdown一些常用命令" class="headerlink" title="Markdown一些常用命令"></a>Markdown一些常用命令</h2><h3 id="1-设置标题级别"><a href="#1-设置标题级别" class="headerlink" title="1.设置标题级别"></a>1.设置标题级别</h3><pre class="line-numbers language-bash"><code class="language-bash">标题前加几个<span class="token comment" spellcheck="true">#，就代表几级标题</span>一级标题 <span class="token comment" spellcheck="true"># 标题</span>二级标题 <span class="token comment" spellcheck="true">## 标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-引用"><a href="#2-引用" class="headerlink" title="2.引用"></a>2.引用</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">></span> 亚里士多德说过，人生最终的价值在于觉醒和思考，而不仅仅在于生存。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>亚里士多德说过，人生最终的价值在于觉醒和思考，而不仅仅在于生存。</p></blockquote><h3 id="3-写无序列表"><a href="#3-写无序列表" class="headerlink" title="3.写无序列表"></a>3.写无序列表</h3><pre class="line-numbers language-bash"><code class="language-bash">- 无序列表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>无序列表</li></ul><h3 id="4-有序列表"><a href="#4-有序列表" class="headerlink" title="4.有序列表"></a>4.有序列表</h3><pre class="line-numbers language-bash"><code class="language-bash">数字+英文句号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.xxx<br>2.xxx<br>3.xxx</p><h3 id="5-插入图片"><a href="#5-插入图片" class="headerlink" title="5.插入图片"></a>5.插入图片</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span>中秋<span class="token punctuation">]</span><span class="token punctuation">(</span>http://pic128.huitu.com/res/20190901/571787_20190901124015978020_1.jpg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic128.huitu.com/res/20190901/571787_20190901124015978020_1.jpg" alt="中秋"></p><h3 id="6-创建超链接"><a href="#6-创建超链接" class="headerlink" title="6.创建超链接"></a>6.创建超链接</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>baidu<span class="token punctuation">]</span><span class="token punctuation">(</span>https://www.baidu.com<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.baidu.com" target="_blank" rel="noopener">baidu</a></p><h3 id="7-加粗"><a href="#7-加粗" class="headerlink" title="7.加粗"></a>7.加粗</h3><pre class="line-numbers language-bash"><code class="language-bash">**加粗**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>加粗</strong></p><h3 id="8-斜体"><a href="#8-斜体" class="headerlink" title="8.斜体"></a>8.斜体</h3><pre class="line-numbers language-bash"><code class="language-bash">*斜体*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>斜体</em></p><h3 id="9-调整字体、字号和颜色"><a href="#9-调整字体、字号和颜色" class="headerlink" title="9.调整字体、字号和颜色"></a>9.调整字体、字号和颜色</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">"&lt;font face="</span>微软雅黑<span class="token string">" color="</span>red<span class="token string">" size="</span>28<span class="token string">">字体、颜色和字号&lt;/font>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font face="微软雅黑" color="red" size="28">字体、颜色和字号</font></p><h3 id="10-居中、居左、居右（适用于字体、图片）"><a href="#10-居中、居左、居右（适用于字体、图片）" class="headerlink" title="10.居中、居左、居右（适用于字体、图片）"></a>10.居中、居左、居右（适用于字体、图片）</h3><pre class="line-numbers language-bash"><code class="language-bash">居中<span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>font face<span class="token operator">=</span><span class="token string">"微软雅黑"</span> color<span class="token operator">=</span><span class="token string">"red"</span> size<span class="token operator">=</span><span class="token string">"28"</span><span class="token operator">></span>字体、颜色和字号<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span>  居左<span class="token operator">&lt;</span>p align<span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span><span class="token operator">&lt;</span>font face<span class="token operator">=</span><span class="token string">"微软雅黑"</span> color<span class="token operator">=</span><span class="token string">"red"</span> size<span class="token operator">=</span><span class="token string">"28"</span><span class="token operator">></span>字体、颜色和字号<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>/p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-引用本地图片"><a href="#11-引用本地图片" class="headerlink" title="11.引用本地图片"></a>11.引用本地图片</h3><pre class="line-numbers language-bash"><code class="language-bash">1.首先将想要引用的图片保存在本地source/images（需新建images文件夹）文件夹下2.由于博客文件在source/_posts文件夹下，因此引用时需要返回一层目录。引用格式为：<span class="token operator">!</span><span class="token punctuation">[</span>图3<span class="token punctuation">]</span><span class="token punctuation">(</span>/<span class="token punctuation">..</span>/images/image023.jpg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><center><font faceface="微软雅黑" color="green" size="14">**music**</font></center><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=481356667&amp;auto=1&amp;height=66"></iframe></center><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=413812448&amp;auto=0&amp;height=66"></iframe></center><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]<a href="https://www.bilibili.com/video/av23983281" target="_blank" rel="noopener">https://www.bilibili.com/video/av23983281</a><br>[2]<a href="https://walesexcitedmei.github.io/2018/08/29/HEXO-hexo-%E4%B8%AD%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">https://walesexcitedmei.github.io/2018/08/29/HEXO-hexo-%E4%B8%AD%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91%E7%9A%84%E6%96%B9%E6%B3%95/</a>  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10环境下如何用hexo+git 创建个人博客</title>
      <link href="/2019/09/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
      <url>/2019/09/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一章-如何部署环境？"><a href="#第一章-如何部署环境？" class="headerlink" title="第一章  如何部署环境？"></a>第一章  如何部署环境？</h2><pre><code>1.首先下载node.js，下载地址：https://nodejs.org，安装完成后会有包管理器npm（搭建hexo博客框架所必需）。2.安装淘宝的npm的镜像源，在cmd窗口中输入：npm install -g cnpm --registry=https://registry.npm.taobao.org，Enter等待安装完成。（install -g 全局安装）3.利用2中安装的cnpm安装hexo框架，在cmd窗口中输入：cnpm install -g hexo-cli，Enter等待安装完成。至此，hexo安装完成。</code></pre><hr><h2 id="第二章-如何初始化博客？"><a href="#第二章-如何初始化博客？" class="headerlink" title="第二章  如何初始化博客？"></a>第二章  如何初始化博客？</h2><pre><code>1.创建博客存放的文件夹，在cmd窗口中输入：mkdir blog，可以在当前路径下找到blog文件夹（命令：dir），定位到blog文件夹 cd blog，初始化博客hexo init（此步骤之前本地需安装git），等待初始化完成。2.启动本地博客hexo s，浏览器输入：localhost:4000，即可访问。</code></pre><hr><h2 id="第三章-如何写博客？"><a href="#第三章-如何写博客？" class="headerlink" title="第三章  如何写博客？"></a>第三章  如何写博客？</h2><pre><code>1.新建内容hexo n "我的第一篇博客文章"，定位到文章所在文件夹cd source/_posts，查看文件夹下文件目录dir，可用vim/notepad打开vim/notepad 我的第一篇博客文章.md，修改之（makedown格式语法）。2.清理hexo clean，生成hexo g，重启hexo s</code></pre><hr><h2 id="第四章-如何将hexo发布到github上？"><a href="#第四章-如何将hexo发布到github上？" class="headerlink" title="第四章  如何将hexo发布到github上？"></a>第四章  如何将hexo发布到github上？</h2><pre><code>1.Create a new repository in github，repository's name must be consistent with your  person  github's name.    e.g. my github's name is hlgao666, then repository's name must be hlgao666.github.io.2.安装发布插件，cnpm install --save hexo-deployer-git3.修改插件的_config.yml文件。新增：   1）在delpoyment中的type: git；   2）repo:  https://github.com/hlgao666/hlgao666.github.io.git（https的SSH地址）；   3）branch: master4.部署到远端hexo d，此时可直接访问仓库名hlgao666.github.io.</code></pre><hr><h2 id="第五章-如何更换博客主题？"><a href="#第五章-如何更换博客主题？" class="headerlink" title="第五章 如何更换博客主题？"></a>第五章 如何更换博客主题？</h2><pre><code>1.直接克隆：git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia，https://github.com/litten/hexo-theme-yilia.git为源主题地址，存放在blog的themes/yilia下。2.修改插件的_config.yml文件，修改theme为yilia3.hexo clean, hexo g, hexo s, hexo d</code></pre><hr><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><pre><code>cd ../..         后退2层文件夹dir        查看当前文件夹下文件目录     mkdir blog     新建blog文件夹hexo clean    清除hexo g        生成，generatehexo s        启动，starthexo n        新建，newhexo d        发布到远端，deployhexo g -d    生成并发布</code></pre><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]<a href="https://github.com/hlgao666" target="_blank" rel="noopener">https://github.com/hlgao666</a><br>[2]<a href="https://www.bilibili.com/video/av44544186" target="_blank" rel="noopener">https://www.bilibili.com/video/av44544186</a><br>[3]<a href="https://www.codesheep.cn" target="_blank" rel="noopener">https://www.codesheep.cn</a><br>[4]<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-24" target="_blank" rel="noopener">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-24</a></p><hr><h3 id="jump-to-My-Github"><a href="#jump-to-My-Github" class="headerlink" title="jump to My Github"></a><center><a href="https://github.com/hlgao666" target="_blank" rel="noopener">jump to My Github</a></center></h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo+git 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/03/hello-world/"/>
      <url>/2019/09/03/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="More-info-Deployment"><a href="#More-info-Deployment" class="headerlink" title="More info: Deployment"></a>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
